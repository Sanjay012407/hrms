{"ast":null,"code":"import _objectSpread from\"C:/Users/DELL/Desktop/hrms/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useState,useEffect}from'react';import axios from'axios';import{useAuth}from'./AuthContext';import{jsx as _jsx}from\"react/jsx-runtime\";const ProfileContext=/*#__PURE__*/createContext();const API_BASE_URL=process.env.REACT_APP_API_BASE_URL;const getApiUrl=()=>{// In development, use localhost URL\nif(process.env.NODE_ENV==='development'&&process.env.REACT_APP_API_URL){return process.env.REACT_APP_API_URL;}// In production, use the environment variable or fallback\nreturn process.env.REACT_APP_API_URL||'http://localhost:5003';};export const useProfiles=()=>{const context=useContext(ProfileContext);if(!context){throw new Error('useProfiles must be used within a ProfileProvider');}return context;};export const ProfileProvider=_ref=>{let{children}=_ref;const[profiles,setProfiles]=useState([]);const[loading,setLoading]=useState(false);const[error,setError]=useState(null);const{user}=useAuth();// Fetch profiles from API with optimization and persistence\nconst fetchProfiles=async function(){let forceRefresh=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;let usePagination=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;let page=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1;let limit=arguments.length>3&&arguments[3]!==undefined?arguments[3]:20;setLoading(true);try{console.log('Fetching profiles from API (optimized)');// Check cache first unless force refresh\nif(!forceRefresh&&!usePagination){const cachedProfiles=localStorage.getItem('profiles_cache_optimized');const cacheTime=localStorage.getItem('profiles_cache_time');const cacheAge=Date.now()-parseInt(cacheTime||'0');// Use cache if it's less than 5 minutes old\nif(cachedProfiles&&cacheAge<5*60*1000){console.log('Using cached profiles data (optimized)');setProfiles(JSON.parse(cachedProfiles));setError(null);setLoading(false);return;}}// Choose endpoint based on pagination\nconst endpoint=usePagination?\"/api/profiles/paginated?page=\".concat(page,\"&limit=\").concat(limit):'/api/profiles';// Optimized endpoint (excludes binary data)\nconst response=await fetch(\"\".concat(getApiUrl()).concat(endpoint),{headers:{'Cache-Control':'no-cache'},credentials:'include'});if(response.ok){const data=await response.json();const profilesData=usePagination?data.profiles:data;setProfiles(profilesData);setError(null);// Cache the optimized data for persistence (only for non-paginated)\nif(!usePagination){localStorage.setItem('profiles_cache_optimized',JSON.stringify(profilesData));localStorage.setItem('profiles_cache_time',Date.now().toString());console.log(\"Profiles cached successfully (\".concat(profilesData.length,\" profiles, optimized)\"));}// Log data size reduction\nconst dataSize=JSON.stringify(profilesData).length;console.log(\"Fetched \".concat(profilesData.length,\" profiles, data size: \").concat((dataSize/1024/1024).toFixed(2),\"MB\"));return usePagination?data:profilesData;}else{console.error('Failed to fetch profiles:',response.status,response.statusText);setError(\"Failed to fetch profiles: \".concat(response.status));}}catch(error){setError('Failed to fetch profiles');console.error('Error fetching profiles:',error);// Try to use cached data as fallback\nconst cachedProfiles=localStorage.getItem('profiles_cache_optimized');if(cachedProfiles){console.log('Using cached profiles as fallback (optimized)');setProfiles(JSON.parse(cachedProfiles));}else{setProfiles([]);}}finally{setLoading(false);}};// Add delete profile function\nconst deleteProfile=async profileId=>{try{const response=await fetch(\"\".concat(getApiUrl(),\"/api/profiles/\").concat(profileId),{method:'DELETE'});if(response.ok){// Remove from local state\nsetProfiles(prevProfiles=>prevProfiles.filter(p=>p._id!==profileId));// Clear cache to force refresh\nlocalStorage.removeItem('profiles_cache');localStorage.removeItem('profiles_cache_time');console.log('Profile deleted successfully');}else{throw new Error('Failed to delete profile');}}catch(error){console.error('Error deleting profile:',error);throw error;}};// Refresh profiles function\nconst refreshProfiles=async()=>{await fetchProfiles(true);// Force refresh\n};// Load profiles on mount\nuseEffect(()=>{fetchProfiles();},[]);const addProfile=async newProfile=>{setLoading(true);try{const response=await fetch(\"\".concat(getApiUrl(),\"/api/profiles\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(newProfile)});if(!response.ok){throw new Error(\"Failed to create profile: \".concat(response.status));}const data=await response.json();console.log('Profile created successfully:',data);// Add to local state\nsetProfiles(prev=>[data,...prev]);setError(null);// Update optimized cache with new data\nconst updatedProfiles=[data,...profiles];localStorage.setItem('profiles_cache_optimized',JSON.stringify(updatedProfiles));localStorage.setItem('profiles_cache_time',Date.now().toString());console.log('Profile added to optimized cache successfully');return data;}catch(err){setError('Failed to create profile');console.error('Error creating profile:',err);throw err;}finally{setLoading(false);}};const updateProfile=async(id,updatedProfile)=>{setLoading(true);try{const response=await fetch(\"\".concat(getApiUrl(),\"/api/profiles/\").concat(id),{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify(updatedProfile),credentials:'include'});if(!response.ok){throw new Error(\"Failed to update profile: \".concat(response.status));}const data=await response.json();setProfiles(prev=>prev.map(profile=>profile._id===id?data:profile));// Update optimized cache\nconst updatedProfiles=profiles.map(profile=>profile._id===id?data:profile);localStorage.setItem('profiles_cache_optimized',JSON.stringify(updatedProfiles));localStorage.setItem('profiles_cache_time',Date.now().toString());setError(null);return data;}catch(err){setError('Failed to update profile');console.error('Error updating profile:',err);throw err;}finally{setLoading(false);}};const getProfileById=id=>{return profiles.find(profile=>profile._id===id);};// Fetch individual profile with complete data (when needed)\nconst fetchProfileById=async id=>{try{console.log('ProfileContext: Fetching individual profile for ID:',id);const response=await fetch(\"\".concat(getApiUrl(),\"/api/profiles/\").concat(id),{credentials:'include'});if(response.ok){const profile=await response.json();console.log('ProfileContext: Individual profile fetched:',{id:profile._id,vtid:profile.vtid,skillkoId:profile.skillkoId,firstName:profile.firstName,lastName:profile.lastName});// Update the profile in the local state\nconst updatedProfiles=profiles.map(p=>p._id===id?_objectSpread(_objectSpread({},p),profile):p);setProfiles(updatedProfiles);// Update optimized cache with the new profile data\nlocalStorage.setItem('profiles_cache_optimized',JSON.stringify(updatedProfiles));localStorage.setItem('profiles_cache_time',Date.now().toString());console.log('ProfileContext: Profile updated in state and cache');return profile;}else{throw new Error(\"Failed to fetch profile: \".concat(response.status));}}catch(error){console.error('Error fetching individual profile:',error);throw error;}};// Fetch profile with complete data including binary data (rarely used)\nconst fetchCompleteProfileById=async id=>{try{const response=await fetch(\"\".concat(getApiUrl(),\"/api/profiles/\").concat(id,\"/complete\"),{credentials:'include'});if(response.ok){const profile=await response.json();return profile;}else{throw new Error(\"Failed to fetch complete profile: \".concat(response.status));}}catch(error){console.error('Error fetching complete profile:',error);throw error;}};const uploadProfilePicture=async(id,file)=>{setLoading(true);console.log('📡 ProfileContext: Starting upload request...',{profileId:id,fileName:file.name});try{const formData=new FormData();formData.append('profilePicture',file);console.log('🌐 ProfileContext: Sending request to server...');const response=await fetch(\"\".concat(getApiUrl(),\"/api/profiles/\").concat(id,\"/upload-picture\"),{method:'POST',body:formData,credentials:'include'});if(!response.ok){throw new Error(\"Failed to upload profile picture: \".concat(response.status));}const data=await response.json();console.log('📥 ProfileContext: Server response received:',data);// Update profile in state immediately\nconst updatedProfiles=profiles.map(profile=>profile._id===id?_objectSpread(_objectSpread({},profile),{},{profilePicture:data.profilePicture}):profile);setProfiles(updatedProfiles);// Update optimized cache immediately\nlocalStorage.setItem('profiles_cache_optimized',JSON.stringify(updatedProfiles));localStorage.setItem('profiles_cache_time',Date.now().toString());console.log('🔄 ProfileContext: Local state and cache updated');setError(null);console.log('✅ ProfileContext: Upload completed successfully');return data.profilePicture;}catch(err){setError('Failed to upload profile picture');console.error('❌ ProfileContext: Upload error:',err);throw err;}finally{setLoading(false);console.log('🏁 ProfileContext: Upload process finished');}};// User profile management - no default hardcoded data\nconst[userProfile,setUserProfile]=useState({});// Initialize user profile with actual user data when user changes\nuseEffect(()=>{if(user){setUserProfile({firstName:user.firstName||'',lastName:user.lastName||'',email:user.email||'',company:user.company||'',jobTitle:user.jobTitle||'',mobile:user.mobile||'',dateOfBirth:user.dateOfBirth||'',bio:user.bio||'',language:user.language||'English',address:user.address||{},staffType:user.staffType||'Staff',role:user.role||'',skillkoId:user.skillkoId||'',department:user.department||'',jobLevel:user.jobLevel||'',profilePicture:user.profilePicture||''});}},[user]);const updateUserProfile=async profileData=>{setLoading(true);try{// TODO: Replace with actual API call when backend profile update endpoint is ready\n// const response = await axios.put('/api/users/profile', profileData);\nsetUserProfile(prev=>_objectSpread(_objectSpread({},prev),{},{firstName:profileData.firstName,lastName:profileData.lastName,name:\"\".concat(profileData.firstName,\" \").concat(profileData.lastName),role:\"Account Administrator, \".concat(profileData.jobTitle,\", \").concat(profileData.company),email:profileData.username,company:profileData.company,jobTitle:profileData.jobTitle,mobile:profileData.mobile,dob:profileData.dob,bio:profileData.bio,language:profileData.language,otherInfo:profileData.otherInfo}));console.log('Profile updated:',profileData);setError(null);return{success:true};}catch(err){setError('Failed to update profile');return{success:false,error:err.message};}};const value={profiles,loading,error,addProfile,updateProfile,deleteProfile,refreshProfiles,fetchProfiles,getProfileById,fetchProfileById,fetchCompleteProfileById,uploadProfilePicture,userProfile,updateUserProfile};return/*#__PURE__*/_jsx(ProfileContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","useAuth","jsx","_jsx","ProfileContext","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","getApiUrl","NODE_ENV","REACT_APP_API_URL","useProfiles","context","Error","ProfileProvider","_ref","children","profiles","setProfiles","loading","setLoading","error","setError","user","fetchProfiles","forceRefresh","arguments","length","undefined","usePagination","page","limit","console","log","cachedProfiles","localStorage","getItem","cacheTime","cacheAge","Date","now","parseInt","JSON","parse","endpoint","concat","response","fetch","headers","credentials","ok","data","json","profilesData","setItem","stringify","toString","dataSize","toFixed","status","statusText","deleteProfile","profileId","method","prevProfiles","filter","p","_id","removeItem","refreshProfiles","addProfile","newProfile","body","prev","updatedProfiles","err","updateProfile","id","updatedProfile","map","profile","getProfileById","find","fetchProfileById","vtid","skillkoId","firstName","lastName","_objectSpread","fetchCompleteProfileById","uploadProfilePicture","file","fileName","name","formData","FormData","append","profilePicture","userProfile","setUserProfile","email","company","jobTitle","mobile","dateOfBirth","bio","language","address","staffType","role","department","jobLevel","updateUserProfile","profileData","username","dob","otherInfo","success","message","value","Provider"],"sources":["C:/Users/DELL/Desktop/hrms/frontend/src/context/ProfileContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useAuth } from './AuthContext';\r\n\r\nconst ProfileContext = createContext();\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL;\r\n\r\nconst getApiUrl = () => {\r\n  // In development, use localhost URL\r\n  if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_API_URL) {\r\n    return process.env.REACT_APP_API_URL;\r\n  }\r\n  \r\n  // In production, use the environment variable or fallback\r\n  return process.env.REACT_APP_API_URL || 'http://localhost:5003';\r\n};\r\n\r\nexport const useProfiles = () => {\r\n  const context = useContext(ProfileContext);\r\n  if (!context) {\r\n    throw new Error('useProfiles must be used within a ProfileProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const ProfileProvider = ({ children }) => {\r\n  const [profiles, setProfiles] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const { user } = useAuth();\r\n\r\n  // Fetch profiles from API with optimization and persistence\r\n  const fetchProfiles = async (forceRefresh = false, usePagination = false, page = 1, limit = 20) => {\r\n    setLoading(true);\r\n    try {\r\n      console.log('Fetching profiles from API (optimized)');\r\n      \r\n      // Check cache first unless force refresh\r\n      if (!forceRefresh && !usePagination) {\r\n        const cachedProfiles = localStorage.getItem('profiles_cache_optimized');\r\n        const cacheTime = localStorage.getItem('profiles_cache_time');\r\n        const cacheAge = Date.now() - parseInt(cacheTime || '0');\r\n        \r\n        // Use cache if it's less than 5 minutes old\r\n        if (cachedProfiles && cacheAge < 5 * 60 * 1000) {\r\n          console.log('Using cached profiles data (optimized)');\r\n          setProfiles(JSON.parse(cachedProfiles));\r\n          setError(null);\r\n          setLoading(false);\r\n          return;\r\n        }\r\n      }\r\n      \r\n      // Choose endpoint based on pagination\r\n      const endpoint = usePagination \r\n        ? `/api/profiles/paginated?page=${page}&limit=${limit}`\r\n        : '/api/profiles'; // Optimized endpoint (excludes binary data)\r\n      \r\n      const response = await fetch(`${getApiUrl()}${endpoint}`, {\r\n        headers: {\r\n          'Cache-Control': 'no-cache',\r\n        },\r\n        credentials: 'include'\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        const profilesData = usePagination ? data.profiles : data;\r\n        \r\n        setProfiles(profilesData);\r\n        setError(null);\r\n        \r\n        // Cache the optimized data for persistence (only for non-paginated)\r\n        if (!usePagination) {\r\n          localStorage.setItem('profiles_cache_optimized', JSON.stringify(profilesData));\r\n          localStorage.setItem('profiles_cache_time', Date.now().toString());\r\n          console.log(`Profiles cached successfully (${profilesData.length} profiles, optimized)`);\r\n        }\r\n        \r\n        // Log data size reduction\r\n        const dataSize = JSON.stringify(profilesData).length;\r\n        console.log(`Fetched ${profilesData.length} profiles, data size: ${(dataSize / 1024 / 1024).toFixed(2)}MB`);\r\n        \r\n        return usePagination ? data : profilesData;\r\n      } else {\r\n        console.error('Failed to fetch profiles:', response.status, response.statusText);\r\n        setError(`Failed to fetch profiles: ${response.status}`);\r\n      }\r\n    } catch (error) {\r\n      setError('Failed to fetch profiles');\r\n      console.error('Error fetching profiles:', error);\r\n      \r\n      // Try to use cached data as fallback\r\n      const cachedProfiles = localStorage.getItem('profiles_cache_optimized');\r\n      if (cachedProfiles) {\r\n        console.log('Using cached profiles as fallback (optimized)');\r\n        setProfiles(JSON.parse(cachedProfiles));\r\n      } else {\r\n        setProfiles([]);\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Add delete profile function\r\n  const deleteProfile = async (profileId) => {\r\n    try {\r\n      const response = await fetch(`${getApiUrl()}/api/profiles/${profileId}`, {\r\n        method: 'DELETE',\r\n      });\r\n      \r\n      if (response.ok) {\r\n        // Remove from local state\r\n        setProfiles(prevProfiles => prevProfiles.filter(p => p._id !== profileId));\r\n        \r\n        // Clear cache to force refresh\r\n        localStorage.removeItem('profiles_cache');\r\n        localStorage.removeItem('profiles_cache_time');\r\n        \r\n        console.log('Profile deleted successfully');\r\n      } else {\r\n        throw new Error('Failed to delete profile');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error deleting profile:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Refresh profiles function\r\n  const refreshProfiles = async () => {\r\n    await fetchProfiles(true); // Force refresh\r\n  };\r\n  // Load profiles on mount\r\n  useEffect(() => {\r\n    fetchProfiles();\r\n  }, []);\r\n\r\n  const addProfile = async (newProfile) => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await fetch(`${getApiUrl()}/api/profiles`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(newProfile),\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Failed to create profile: ${response.status}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      console.log('Profile created successfully:', data);\r\n      \r\n      // Add to local state\r\n      setProfiles(prev => [data, ...prev]);\r\n      setError(null);\r\n      \r\n      // Update optimized cache with new data\r\n      const updatedProfiles = [data, ...profiles];\r\n      localStorage.setItem('profiles_cache_optimized', JSON.stringify(updatedProfiles));\r\n      localStorage.setItem('profiles_cache_time', Date.now().toString());\r\n      \r\n      console.log('Profile added to optimized cache successfully');\r\n      \r\n      return data;\r\n    } catch (err) {\r\n      setError('Failed to create profile');\r\n      console.error('Error creating profile:', err);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const updateProfile = async (id, updatedProfile) => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await fetch(`${getApiUrl()}/api/profiles/${id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(updatedProfile),\r\n        credentials: 'include'\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Failed to update profile: ${response.status}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      setProfiles(prev => \r\n        prev.map(profile => profile._id === id ? data : profile)\r\n      );\r\n      \r\n      // Update optimized cache\r\n      const updatedProfiles = profiles.map(profile => profile._id === id ? data : profile);\r\n      localStorage.setItem('profiles_cache_optimized', JSON.stringify(updatedProfiles));\r\n      localStorage.setItem('profiles_cache_time', Date.now().toString());\r\n      \r\n      setError(null);\r\n      return data;\r\n    } catch (err) {\r\n      setError('Failed to update profile');\r\n      console.error('Error updating profile:', err);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n\r\n  const getProfileById = (id) => {\r\n    return profiles.find(profile => profile._id === id);\r\n  };\r\n\r\n  // Fetch individual profile with complete data (when needed)\r\n  const fetchProfileById = async (id) => {\r\n    try {\r\n      console.log('ProfileContext: Fetching individual profile for ID:', id);\r\n      const response = await fetch(`${getApiUrl()}/api/profiles/${id}`, {\r\n        credentials: 'include'\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const profile = await response.json();\r\n        console.log('ProfileContext: Individual profile fetched:', {\r\n          id: profile._id,\r\n          vtid: profile.vtid,\r\n          skillkoId: profile.skillkoId,\r\n          firstName: profile.firstName,\r\n          lastName: profile.lastName\r\n        });\r\n        \r\n        // Update the profile in the local state\r\n        const updatedProfiles = profiles.map(p => p._id === id ? { ...p, ...profile } : p);\r\n        setProfiles(updatedProfiles);\r\n        \r\n        // Update optimized cache with the new profile data\r\n        localStorage.setItem('profiles_cache_optimized', JSON.stringify(updatedProfiles));\r\n        localStorage.setItem('profiles_cache_time', Date.now().toString());\r\n        console.log('ProfileContext: Profile updated in state and cache');\r\n        \r\n        return profile;\r\n      } else {\r\n        throw new Error(`Failed to fetch profile: ${response.status}`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching individual profile:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Fetch profile with complete data including binary data (rarely used)\r\n  const fetchCompleteProfileById = async (id) => {\r\n    try {\r\n      const response = await fetch(`${getApiUrl()}/api/profiles/${id}/complete`, {\r\n        credentials: 'include'\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const profile = await response.json();\r\n        return profile;\r\n      } else {\r\n        throw new Error(`Failed to fetch complete profile: ${response.status}`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching complete profile:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const uploadProfilePicture = async (id, file) => {\r\n    setLoading(true);\r\n    console.log('📡 ProfileContext: Starting upload request...', { profileId: id, fileName: file.name });\r\n    \r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('profilePicture', file);\r\n      \r\n      console.log('🌐 ProfileContext: Sending request to server...');\r\n      const response = await fetch(`${getApiUrl()}/api/profiles/${id}/upload-picture`, {\r\n        method: 'POST',\r\n        body: formData,\r\n        credentials: 'include'\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Failed to upload profile picture: ${response.status}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      console.log('📥 ProfileContext: Server response received:', data);\r\n      \r\n      // Update profile in state immediately\r\n      const updatedProfiles = profiles.map(profile => \r\n        profile._id === id \r\n          ? { ...profile, profilePicture: data.profilePicture }\r\n          : profile\r\n      );\r\n      setProfiles(updatedProfiles);\r\n      \r\n      // Update optimized cache immediately\r\n      localStorage.setItem('profiles_cache_optimized', JSON.stringify(updatedProfiles));\r\n      localStorage.setItem('profiles_cache_time', Date.now().toString());\r\n      \r\n      console.log('🔄 ProfileContext: Local state and cache updated');\r\n      \r\n      setError(null);\r\n      console.log('✅ ProfileContext: Upload completed successfully');\r\n      return data.profilePicture;\r\n    } catch (err) {\r\n      setError('Failed to upload profile picture');\r\n      console.error('❌ ProfileContext: Upload error:', err);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n      console.log('🏁 ProfileContext: Upload process finished');\r\n    }\r\n  };\r\n\r\n  // User profile management - no default hardcoded data\r\n  const [userProfile, setUserProfile] = useState({});\r\n\r\n  // Initialize user profile with actual user data when user changes\r\n  useEffect(() => {\r\n    if (user) {\r\n      setUserProfile({\r\n        firstName: user.firstName || '',\r\n        lastName: user.lastName || '',\r\n        email: user.email || '',\r\n        company: user.company || '',\r\n        jobTitle: user.jobTitle || '',\r\n        mobile: user.mobile || '',\r\n        dateOfBirth: user.dateOfBirth || '',\r\n        bio: user.bio || '',\r\n        language: user.language || 'English',\r\n        address: user.address || {},\r\n        staffType: user.staffType || 'Staff',\r\n        role: user.role || '',\r\n        skillkoId: user.skillkoId || '',\r\n        department: user.department || '',\r\n        jobLevel: user.jobLevel || '',\r\n        profilePicture: user.profilePicture || ''\r\n      });\r\n    }\r\n  }, [user]);\r\n\r\n  const updateUserProfile = async (profileData) => {\r\n    setLoading(true);\r\n    try {\r\n      // TODO: Replace with actual API call when backend profile update endpoint is ready\r\n      // const response = await axios.put('/api/users/profile', profileData);\r\n      \r\n      setUserProfile(prev => ({\r\n        ...prev,\r\n        firstName: profileData.firstName,\r\n        lastName: profileData.lastName,\r\n        name: `${profileData.firstName} ${profileData.lastName}`,\r\n        role: `Account Administrator, ${profileData.jobTitle}, ${profileData.company}`,\r\n        email: profileData.username,\r\n        company: profileData.company,\r\n        jobTitle: profileData.jobTitle,\r\n        mobile: profileData.mobile,\r\n        dob: profileData.dob,\r\n        bio: profileData.bio,\r\n        language: profileData.language,\r\n        otherInfo: profileData.otherInfo\r\n      }));\r\n      \r\n      console.log('Profile updated:', profileData);\r\n      setError(null);\r\n      return { success: true };\r\n    } catch (err) {\r\n      setError('Failed to update profile');\r\n      return { success: false, error: err.message };\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    profiles,\r\n    loading,\r\n    error,\r\n    addProfile,\r\n    updateProfile,\r\n    deleteProfile,\r\n    refreshProfiles,\r\n    fetchProfiles,\r\n    getProfileById,\r\n    fetchProfileById,\r\n    fetchCompleteProfileById,\r\n    uploadProfilePicture,\r\n    userProfile,\r\n    updateUserProfile\r\n  };\r\n\r\n  return (\r\n    <ProfileContext.Provider value={value}>\r\n      {children}\r\n    </ProfileContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}