{"ast":null,"code":"// src/utils/errorHandler.js\nexport const handleError = (error, context = 'Unknown') => {\n  var _error$response, _error$response$data;\n  // Log error for debugging\n  console.error(`Error in ${context}:`, error);\n\n  // In production, you might want to send errors to a logging service\n  if (process.env.NODE_ENV === 'production') {\n    // Example: Send to error tracking service\n    // errorTrackingService.captureException(error, { context });\n  }\n\n  // Return user-friendly error message\n  if (error !== null && error !== void 0 && (_error$response = error.response) !== null && _error$response !== void 0 && (_error$response$data = _error$response.data) !== null && _error$response$data !== void 0 && _error$response$data.message) {\n    return error.response.data.message;\n  }\n  if (error !== null && error !== void 0 && error.message) {\n    return error.message;\n  }\n  return 'An unexpected error occurred. Please try again.';\n};\nexport const isNetworkError = error => {\n  return !error.response && error.request;\n};\nexport const isServerError = error => {\n  var _error$response2;\n  return (error === null || error === void 0 ? void 0 : (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) >= 500;\n};\nexport const isClientError = error => {\n  var _error$response3, _error$response4;\n  return (error === null || error === void 0 ? void 0 : (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) >= 400 && (error === null || error === void 0 ? void 0 : (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) < 500;\n};\nexport const getErrorMessage = error => {\n  if (isNetworkError(error)) {\n    return 'Network error. Please check your internet connection.';\n  }\n  if (isServerError(error)) {\n    return 'Server error. Please try again later.';\n  }\n  if (isClientError(error)) {\n    var _error$response5, _error$response5$data;\n    return ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Invalid request.';\n  }\n  return handleError(error);\n};","map":{"version":3,"names":["handleError","error","context","_error$response","_error$response$data","console","process","env","NODE_ENV","response","data","message","isNetworkError","request","isServerError","_error$response2","status","isClientError","_error$response3","_error$response4","getErrorMessage","_error$response5","_error$response5$data"],"sources":["C:/Users/DELL/Desktop/hrms/frontend/src/utils/errorHandler.js"],"sourcesContent":["// src/utils/errorHandler.js\r\nexport const handleError = (error, context = 'Unknown') => {\r\n  // Log error for debugging\r\n  console.error(`Error in ${context}:`, error);\r\n  \r\n  // In production, you might want to send errors to a logging service\r\n  if (process.env.NODE_ENV === 'production') {\r\n    // Example: Send to error tracking service\r\n    // errorTrackingService.captureException(error, { context });\r\n  }\r\n  \r\n  // Return user-friendly error message\r\n  if (error?.response?.data?.message) {\r\n    return error.response.data.message;\r\n  }\r\n  \r\n  if (error?.message) {\r\n    return error.message;\r\n  }\r\n  \r\n  return 'An unexpected error occurred. Please try again.';\r\n};\r\n\r\nexport const isNetworkError = (error) => {\r\n  return !error.response && error.request;\r\n};\r\n\r\nexport const isServerError = (error) => {\r\n  return error?.response?.status >= 500;\r\n};\r\n\r\nexport const isClientError = (error) => {\r\n  return error?.response?.status >= 400 && error?.response?.status < 500;\r\n};\r\n\r\nexport const getErrorMessage = (error) => {\r\n  if (isNetworkError(error)) {\r\n    return 'Network error. Please check your internet connection.';\r\n  }\r\n  \r\n  if (isServerError(error)) {\r\n    return 'Server error. Please try again later.';\r\n  }\r\n  \r\n  if (isClientError(error)) {\r\n    return error.response?.data?.message || 'Invalid request.';\r\n  }\r\n  \r\n  return handleError(error);\r\n};\r\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,WAAW,GAAGA,CAACC,KAAK,EAAEC,OAAO,GAAG,SAAS,KAAK;EAAA,IAAAC,eAAA,EAAAC,oBAAA;EACzD;EACAC,OAAO,CAACJ,KAAK,CAAC,YAAYC,OAAO,GAAG,EAAED,KAAK,CAAC;;EAE5C;EACA,IAAIK,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACzC;IACA;EAAA;;EAGF;EACA,IAAIP,KAAK,aAALA,KAAK,gBAAAE,eAAA,GAALF,KAAK,CAAEQ,QAAQ,cAAAN,eAAA,gBAAAC,oBAAA,GAAfD,eAAA,CAAiBO,IAAI,cAAAN,oBAAA,eAArBA,oBAAA,CAAuBO,OAAO,EAAE;IAClC,OAAOV,KAAK,CAACQ,QAAQ,CAACC,IAAI,CAACC,OAAO;EACpC;EAEA,IAAIV,KAAK,aAALA,KAAK,eAALA,KAAK,CAAEU,OAAO,EAAE;IAClB,OAAOV,KAAK,CAACU,OAAO;EACtB;EAEA,OAAO,iDAAiD;AAC1D,CAAC;AAED,OAAO,MAAMC,cAAc,GAAIX,KAAK,IAAK;EACvC,OAAO,CAACA,KAAK,CAACQ,QAAQ,IAAIR,KAAK,CAACY,OAAO;AACzC,CAAC;AAED,OAAO,MAAMC,aAAa,GAAIb,KAAK,IAAK;EAAA,IAAAc,gBAAA;EACtC,OAAO,CAAAd,KAAK,aAALA,KAAK,wBAAAc,gBAAA,GAALd,KAAK,CAAEQ,QAAQ,cAAAM,gBAAA,uBAAfA,gBAAA,CAAiBC,MAAM,KAAI,GAAG;AACvC,CAAC;AAED,OAAO,MAAMC,aAAa,GAAIhB,KAAK,IAAK;EAAA,IAAAiB,gBAAA,EAAAC,gBAAA;EACtC,OAAO,CAAAlB,KAAK,aAALA,KAAK,wBAAAiB,gBAAA,GAALjB,KAAK,CAAEQ,QAAQ,cAAAS,gBAAA,uBAAfA,gBAAA,CAAiBF,MAAM,KAAI,GAAG,IAAI,CAAAf,KAAK,aAALA,KAAK,wBAAAkB,gBAAA,GAALlB,KAAK,CAAEQ,QAAQ,cAAAU,gBAAA,uBAAfA,gBAAA,CAAiBH,MAAM,IAAG,GAAG;AACxE,CAAC;AAED,OAAO,MAAMI,eAAe,GAAInB,KAAK,IAAK;EACxC,IAAIW,cAAc,CAACX,KAAK,CAAC,EAAE;IACzB,OAAO,uDAAuD;EAChE;EAEA,IAAIa,aAAa,CAACb,KAAK,CAAC,EAAE;IACxB,OAAO,uCAAuC;EAChD;EAEA,IAAIgB,aAAa,CAAChB,KAAK,CAAC,EAAE;IAAA,IAAAoB,gBAAA,EAAAC,qBAAA;IACxB,OAAO,EAAAD,gBAAA,GAAApB,KAAK,CAACQ,QAAQ,cAAAY,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBX,IAAI,cAAAY,qBAAA,uBAApBA,qBAAA,CAAsBX,OAAO,KAAI,kBAAkB;EAC5D;EAEA,OAAOX,WAAW,CAACC,KAAK,CAAC;AAC3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}