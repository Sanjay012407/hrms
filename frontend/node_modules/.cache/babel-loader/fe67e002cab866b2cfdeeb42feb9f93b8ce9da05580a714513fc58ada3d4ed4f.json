{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect,useCallback,useMemo}from'react';import axios from'axios';import{jsx as _jsx}from\"react/jsx-runtime\";const CertificateContext=/*#__PURE__*/createContext();const API_BASE_URL=process.env.REACT_APP_API_BASE_URL;export const useCertificates=()=>{const context=useContext(CertificateContext);if(!context)throw new Error('useCertificates must be used within a CertificateProvider');return context;};const parseExpiryDate=expiryDateStr=>{if(!expiryDateStr)return null;const[day,month,year]=expiryDateStr.split('/');return new Date(year,month-1,day);};export const CertificateProvider=_ref=>{let{children}=_ref;const[certificates,setCertificates]=useState([]);const[loadingCount,setLoadingCount]=useState(0);const loading=loadingCount>0;const[error,setError]=useState(null);const incrementLoading=()=>setLoadingCount(count=>count+1);const decrementLoading=()=>setLoadingCount(count=>Math.max(count-1,0));const fetchCertificates=useCallback(async()=>{incrementLoading();try{const response=await axios.get(\"\".concat(API_BASE_URL,\"/certificates\"),{headers:{'Cache-Control':'max-age=300'}});if(!Array.isArray(response.data)){setCertificates([]);setError(\"Invalid data format received from API\");return;}setCertificates(response.data);setError(null);}catch(_unused){setError('Failed to fetch certificates');setCertificates([]);}finally{decrementLoading();}},[]);const addCertificate=useCallback(async newCertificate=>{incrementLoading();try{const formData=new FormData();Object.entries(newCertificate).forEach(_ref2=>{let[key,val]=_ref2;if(key==='fileData'&&val){formData.append('certificateFile',val);}else if(key==='timeLogged'&&typeof val==='object'){formData.append('timeLogged',JSON.stringify(val));}else if(val!==null&&val!==undefined){formData.append(key,val);}});const response=await axios.post(\"\".concat(API_BASE_URL,\"/certificates\"),formData,{headers:{'Content-Type':'multipart/form-data'}});setCertificates(prev=>[response.data,...prev]);setError(null);return response.data;}catch(err){setError('Failed to add certificate');console.error(err);throw err;}finally{decrementLoading();}},[]);// Other functions similarly wrapped in useCallback (updateCertificate, deleteCertificate, etc.)\nconst getActiveCertificatesCount=useCallback(()=>{if(!Array.isArray(certificates)){console.error(\"Expected an array of certificates but got:\",certificates);return 0;}return certificates.filter(cert=>cert.active==='Yes'||cert.status==='Active').length;},[certificates]);const getExpiringCertificates=useCallback(function(){let days=arguments.length>0&&arguments[0]!==undefined?arguments[0]:30;if(!Array.isArray(certificates))return[];const today=new Date();const futureDate=new Date();futureDate.setDate(today.getDate()+days);return certificates.filter(cert=>{const expiryDate=parseExpiryDate(cert.expiryDate);return expiryDate&&expiryDate>=today&&expiryDate<=futureDate;});},[certificates]);const getExpiredCertificates=useCallback(()=>{if(!Array.isArray(certificates))return[];const today=new Date();return certificates.filter(cert=>{const expiryDate=parseExpiryDate(cert.expiryDate);return expiryDate&&expiryDate<today;});},[certificates]);const getCertificatesByCategory=useCallback(()=>{const counts={};for(const cert of certificates){const category=cert.category||'Other';counts[category]=(counts[category]||0)+1;}return counts;},[certificates]);const getCertificatesByJobRole=useCallback(()=>{const counts={};for(const cert of certificates){const jobRole=cert.jobRole||'Unspecified';counts[jobRole]=(counts[jobRole]||0)+1;}return counts;},[certificates]);const value=useMemo(()=>({certificates,loading,error,fetchCertificates,addCertificate,// updateCertificate,\n// updateCertificateWithFile,\n// deleteCertificate,\ngetCertificateById:id=>certificates.find(cert=>cert._id===id||cert.id===id),getActiveCertificatesCount,getExpiringCertificates,getExpiredCertificates,getCertificatesByCategory,getCertificatesByJobRole}),[certificates,loading,error,fetchCertificates,addCertificate,getActiveCertificatesCount,getExpiringCertificates,getExpiredCertificates,getCertificatesByCategory,getCertificatesByJobRole]);useEffect(()=>{fetchCertificates();},[fetchCertificates]);return/*#__PURE__*/_jsx(CertificateContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","useMemo","axios","jsx","_jsx","CertificateContext","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","useCertificates","context","Error","parseExpiryDate","expiryDateStr","day","month","year","split","Date","CertificateProvider","_ref","children","certificates","setCertificates","loadingCount","setLoadingCount","loading","error","setError","incrementLoading","count","decrementLoading","Math","max","fetchCertificates","response","get","concat","headers","Array","isArray","data","_unused","addCertificate","newCertificate","formData","FormData","Object","entries","forEach","_ref2","key","val","append","JSON","stringify","undefined","post","prev","err","console","getActiveCertificatesCount","filter","cert","active","status","length","getExpiringCertificates","days","arguments","today","futureDate","setDate","getDate","expiryDate","getExpiredCertificates","getCertificatesByCategory","counts","category","getCertificatesByJobRole","jobRole","value","getCertificateById","id","find","_id","Provider"],"sources":["C:/Users/DELL/Desktop/hrms/frontend/src/context/CertificateContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback, useMemo } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst CertificateContext = createContext();\r\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL;\r\n\r\nexport const useCertificates = () => {\r\n  const context = useContext(CertificateContext);\r\n  if (!context) throw new Error('useCertificates must be used within a CertificateProvider');\r\n  return context;\r\n};\r\n\r\nconst parseExpiryDate = (expiryDateStr) => {\r\n  if (!expiryDateStr) return null;\r\n  const [day, month, year] = expiryDateStr.split('/');\r\n  return new Date(year, month - 1, day);\r\n};\r\n\r\nexport const CertificateProvider = ({ children }) => {\r\n  const [certificates, setCertificates] = useState([]);\r\n  const [loadingCount, setLoadingCount] = useState(0);\r\n  const loading = loadingCount > 0;\r\n  const [error, setError] = useState(null);\r\n\r\n  const incrementLoading = () => setLoadingCount(count => count + 1);\r\n  const decrementLoading = () => setLoadingCount(count => Math.max(count - 1, 0));\r\n\r\n  const fetchCertificates = useCallback(async () => {\r\n    incrementLoading();\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/certificates`, {\r\n        headers: { 'Cache-Control': 'max-age=300' }\r\n      });\r\n      if (!Array.isArray(response.data)) {\r\n        setCertificates([]);\r\n        setError(\"Invalid data format received from API\");\r\n        return;\r\n      }\r\n      setCertificates(response.data);\r\n      setError(null);\r\n    } catch {\r\n      setError('Failed to fetch certificates');\r\n      setCertificates([]);\r\n    } finally {\r\n      decrementLoading();\r\n    }\r\n  }, []);\r\n\r\n  const addCertificate = useCallback(async (newCertificate) => {\r\n    incrementLoading();\r\n    try {\r\n      const formData = new FormData();\r\n      Object.entries(newCertificate).forEach(([key, val]) => {\r\n        if (key === 'fileData' && val) {\r\n          formData.append('certificateFile', val);\r\n        } else if (key === 'timeLogged' && typeof val === 'object') {\r\n          formData.append('timeLogged', JSON.stringify(val));\r\n        } else if (val !== null && val !== undefined) {\r\n          formData.append(key, val);\r\n        }\r\n      });\r\n      const response = await axios.post(`${API_BASE_URL}/certificates`, formData, {\r\n        headers: { 'Content-Type': 'multipart/form-data' },\r\n      });\r\n      setCertificates(prev => [response.data, ...prev]);\r\n      setError(null);\r\n      return response.data;\r\n    } catch (err) {\r\n      setError('Failed to add certificate');\r\n      console.error(err);\r\n      throw err;\r\n    } finally {\r\n      decrementLoading();\r\n    }\r\n  }, []);\r\n\r\n  // Other functions similarly wrapped in useCallback (updateCertificate, deleteCertificate, etc.)\r\n\r\n  const getActiveCertificatesCount = useCallback(() => {\r\n    if (!Array.isArray(certificates)) {\r\n      console.error(\"Expected an array of certificates but got:\", certificates);\r\n      return 0;\r\n    }\r\n    return certificates.filter(cert => cert.active === 'Yes' || cert.status === 'Active').length;\r\n  }, [certificates]);\r\n\r\n  const getExpiringCertificates = useCallback((days = 30) => {\r\n    if (!Array.isArray(certificates)) return [];\r\n    const today = new Date();\r\n    const futureDate = new Date();\r\n    futureDate.setDate(today.getDate() + days);\r\n    return certificates.filter(cert => {\r\n      const expiryDate = parseExpiryDate(cert.expiryDate);\r\n      return expiryDate && expiryDate >= today && expiryDate <= futureDate;\r\n    });\r\n  }, [certificates]);\r\n\r\n  const getExpiredCertificates = useCallback(() => {\r\n    if (!Array.isArray(certificates)) return [];\r\n    const today = new Date();\r\n    return certificates.filter(cert => {\r\n      const expiryDate = parseExpiryDate(cert.expiryDate);\r\n      return expiryDate && expiryDate < today;\r\n    });\r\n  }, [certificates]);\r\n\r\n  const getCertificatesByCategory = useCallback(() => {\r\n    const counts = {};\r\n    for (const cert of certificates) {\r\n      const category = cert.category || 'Other';\r\n      counts[category] = (counts[category] || 0) + 1;\r\n    }\r\n    return counts;\r\n  }, [certificates]);\r\n\r\n  const getCertificatesByJobRole = useCallback(() => {\r\n    const counts = {};\r\n    for (const cert of certificates) {\r\n      const jobRole = cert.jobRole || 'Unspecified';\r\n      counts[jobRole] = (counts[jobRole] || 0) + 1;\r\n    }\r\n    return counts;\r\n  }, [certificates]);\r\n\r\n  const value = useMemo(() => ({\r\n    certificates,\r\n    loading,\r\n    error,\r\n    fetchCertificates,\r\n    addCertificate,\r\n    // updateCertificate,\r\n    // updateCertificateWithFile,\r\n    // deleteCertificate,\r\n    getCertificateById: (id) => certificates.find(cert => cert._id === id || cert.id === id),\r\n    getActiveCertificatesCount,\r\n    getExpiringCertificates,\r\n    getExpiredCertificates,\r\n    getCertificatesByCategory,\r\n    getCertificatesByJobRole\r\n  }), [\r\n    certificates,\r\n    loading,\r\n    error,\r\n    fetchCertificates,\r\n    addCertificate,\r\n    getActiveCertificatesCount,\r\n    getExpiringCertificates,\r\n    getExpiredCertificates,\r\n    getCertificatesByCategory,\r\n    getCertificatesByJobRole,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    fetchCertificates();\r\n  }, [fetchCertificates]);\r\n\r\n  return (\r\n    <CertificateContext.Provider value={value}>\r\n      {children}\r\n    </CertificateContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}