{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\hrm\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/context/AuthContext.js\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nconst getApiUrl = () => {\n  var _process$env$REACT_AP;\n  // In development, use localhost URL\n  if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_API_URL) {\n    return process.env.REACT_APP_API_URL;\n  }\n  // In production or when API_BASE_URL is relative, use relative path\n  if ((_process$env$REACT_AP = process.env.REACT_APP_API_BASE_URL) !== null && _process$env$REACT_AP !== void 0 && _process$env$REACT_AP.startsWith('/')) {\n    return '';\n  }\n  // Fallback to localhost for development\n  return process.env.REACT_APP_API_URL || 'http://localhost:5003';\n};\nconst API_BASE_URL = `${getApiUrl()}/api`;\n\n// Configure axios to include credentials (cookies) with requests\naxios.defaults.withCredentials = true;\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Check for existing session on app start\n  useEffect(() => {\n    validateSession();\n  }, []);\n  const validateSession = async () => {\n    setLoading(true);\n    try {\n      // First check if we have stored user data\n      const storedUserData = localStorage.getItem(\"userData\");\n      const storedToken = localStorage.getItem(\"authToken\");\n      if (storedUserData && storedToken) {\n        // Temporarily set user data while validating session\n        const userData = JSON.parse(storedUserData);\n        setUser(userData);\n        setIsAuthenticated(true);\n      }\n\n      // Validate with server\n      const response = await axios.get(`${API_BASE_URL}/auth/validate-session`);\n      if (response.data.isAuthenticated) {\n        setUser(response.data.user);\n        setIsAuthenticated(true);\n        // Update stored data with fresh user info\n        localStorage.setItem(\"userData\", JSON.stringify(response.data.user));\n        // Keep token in localStorage for API compatibility\n        if (response.data.token) {\n          localStorage.setItem(\"authToken\", response.data.token);\n        }\n      } else {\n        setUser(null);\n        setIsAuthenticated(false);\n        localStorage.removeItem(\"authToken\");\n        localStorage.removeItem(\"userData\");\n      }\n    } catch (err) {\n      console.log(\"Session validation failed:\", err.message);\n      // If we have stored data but server validation fails, keep user logged in temporarily\n      const storedUserData = localStorage.getItem(\"userData\");\n      if (storedUserData) {\n        try {\n          const userData = JSON.parse(storedUserData);\n          setUser(userData);\n          setIsAuthenticated(true);\n          console.log(\"Using cached user data due to network/server issue\");\n        } catch (parseErr) {\n          // If stored data is corrupted, clear everything\n          setUser(null);\n          setIsAuthenticated(false);\n          localStorage.removeItem(\"authToken\");\n          localStorage.removeItem(\"userData\");\n        }\n      } else {\n        setUser(null);\n        setIsAuthenticated(false);\n        localStorage.removeItem(\"authToken\");\n        localStorage.removeItem(\"userData\");\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async (email, password, rememberMe = false) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await axios.post(`${API_BASE_URL}/auth/login`, {\n        email,\n        password,\n        rememberMe\n      });\n      const {\n        token,\n        user: userData\n      } = response.data;\n\n      // Store token in localStorage for API compatibility\n      if (token) {\n        localStorage.setItem(\"authToken\", token);\n      }\n      localStorage.setItem(\"userData\", JSON.stringify(userData));\n\n      // Update state - session is automatically handled by cookies\n      setUser(userData);\n      setIsAuthenticated(true);\n      return {\n        success: true\n      };\n    } catch (err) {\n      var _err$response, _err$response$data;\n      const errorMessage = ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || \"Login failed\";\n      setError(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const signup = async userData => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await axios.post(`${API_BASE_URL}/auth/signup`, userData);\n      return {\n        success: true,\n        message: \"Account created successfully\"\n      };\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      const errorMessage = ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || \"Signup failed\";\n      setError(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = async () => {\n    setLoading(true);\n    try {\n      // Call backend logout endpoint to destroy session\n      await axios.post(`${API_BASE_URL}/auth/logout`);\n    } catch (err) {\n      console.error(\"Logout error:\", err);\n    } finally {\n      // Clear local state and storage regardless of API call result\n      localStorage.removeItem(\"authToken\");\n      localStorage.removeItem(\"userData\");\n      setUser(null);\n      setIsAuthenticated(false);\n      setError(null);\n      setLoading(false);\n    }\n  };\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    error,\n    login,\n    signup,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"AaZCefjEQIISzggwPe9U62ieYJk=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","getApiUrl","_process$env$REACT_AP","process","env","NODE_ENV","REACT_APP_API_URL","REACT_APP_API_BASE_URL","startsWith","API_BASE_URL","defaults","withCredentials","AuthProvider","children","_s2","user","setUser","isAuthenticated","setIsAuthenticated","loading","setLoading","error","setError","validateSession","storedUserData","localStorage","getItem","storedToken","userData","JSON","parse","response","get","data","setItem","stringify","token","removeItem","err","console","log","message","parseErr","login","email","password","rememberMe","post","success","_err$response","_err$response$data","errorMessage","signup","_err$response2","_err$response2$data","logout","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/hrm/frontend/src/context/AuthContext.js"],"sourcesContent":["// src/context/AuthContext.js\r\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error(\"useAuth must be used within an AuthProvider\");\r\n  }\r\n  return context;\r\n};\r\n\r\nconst getApiUrl = () => {\r\n  // In development, use localhost URL\r\n  if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_API_URL) {\r\n    return process.env.REACT_APP_API_URL;\r\n  }\r\n  // In production or when API_BASE_URL is relative, use relative path\r\n  if (process.env.REACT_APP_API_BASE_URL?.startsWith('/')) {\r\n    return '';\r\n  }\r\n  // Fallback to localhost for development\r\n  return process.env.REACT_APP_API_URL || 'http://localhost:5003';\r\n};\r\n\r\nconst API_BASE_URL = `${getApiUrl()}/api`;\r\n\r\n// Configure axios to include credentials (cookies) with requests\r\naxios.defaults.withCredentials = true;\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Check for existing session on app start\r\n  useEffect(() => {\r\n    validateSession();\r\n  }, []);\r\n\r\n  const validateSession = async () => {\r\n    setLoading(true);\r\n    try {\r\n      // First check if we have stored user data\r\n      const storedUserData = localStorage.getItem(\"userData\");\r\n      const storedToken = localStorage.getItem(\"authToken\");\r\n      \r\n      if (storedUserData && storedToken) {\r\n        // Temporarily set user data while validating session\r\n        const userData = JSON.parse(storedUserData);\r\n        setUser(userData);\r\n        setIsAuthenticated(true);\r\n      }\r\n\r\n      // Validate with server\r\n      const response = await axios.get(`${API_BASE_URL}/auth/validate-session`);\r\n      \r\n      if (response.data.isAuthenticated) {\r\n        setUser(response.data.user);\r\n        setIsAuthenticated(true);\r\n        // Update stored data with fresh user info\r\n        localStorage.setItem(\"userData\", JSON.stringify(response.data.user));\r\n        // Keep token in localStorage for API compatibility\r\n        if (response.data.token) {\r\n          localStorage.setItem(\"authToken\", response.data.token);\r\n        }\r\n      } else {\r\n        setUser(null);\r\n        setIsAuthenticated(false);\r\n        localStorage.removeItem(\"authToken\");\r\n        localStorage.removeItem(\"userData\");\r\n      }\r\n    } catch (err) {\r\n      console.log(\"Session validation failed:\", err.message);\r\n      // If we have stored data but server validation fails, keep user logged in temporarily\r\n      const storedUserData = localStorage.getItem(\"userData\");\r\n      if (storedUserData) {\r\n        try {\r\n          const userData = JSON.parse(storedUserData);\r\n          setUser(userData);\r\n          setIsAuthenticated(true);\r\n          console.log(\"Using cached user data due to network/server issue\");\r\n        } catch (parseErr) {\r\n          // If stored data is corrupted, clear everything\r\n          setUser(null);\r\n          setIsAuthenticated(false);\r\n          localStorage.removeItem(\"authToken\");\r\n          localStorage.removeItem(\"userData\");\r\n        }\r\n      } else {\r\n        setUser(null);\r\n        setIsAuthenticated(false);\r\n        localStorage.removeItem(\"authToken\");\r\n        localStorage.removeItem(\"userData\");\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const login = async (email, password, rememberMe = false) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}/auth/login`, {\r\n        email,\r\n        password,\r\n        rememberMe\r\n      });\r\n      \r\n      const { token, user: userData } = response.data;\r\n      \r\n      // Store token in localStorage for API compatibility\r\n      if (token) {\r\n        localStorage.setItem(\"authToken\", token);\r\n      }\r\n      localStorage.setItem(\"userData\", JSON.stringify(userData));\r\n      \r\n      // Update state - session is automatically handled by cookies\r\n      setUser(userData);\r\n      setIsAuthenticated(true);\r\n      \r\n      return { success: true };\r\n    } catch (err) {\r\n      const errorMessage = err.response?.data?.message || \"Login failed\";\r\n      setError(errorMessage);\r\n      return { success: false, error: errorMessage };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const signup = async (userData) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}/auth/signup`, userData);\r\n      \r\n      return { success: true, message: \"Account created successfully\" };\r\n    } catch (err) {\r\n      const errorMessage = err.response?.data?.message || \"Signup failed\";\r\n      setError(errorMessage);\r\n      return { success: false, error: errorMessage };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    setLoading(true);\r\n    try {\r\n      // Call backend logout endpoint to destroy session\r\n      await axios.post(`${API_BASE_URL}/auth/logout`);\r\n    } catch (err) {\r\n      console.error(\"Logout error:\", err);\r\n    } finally {\r\n      // Clear local state and storage regardless of API call result\r\n      localStorage.removeItem(\"authToken\");\r\n      localStorage.removeItem(\"userData\");\r\n      setUser(null);\r\n      setIsAuthenticated(false);\r\n      setError(null);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    isAuthenticated,\r\n    loading,\r\n    error,\r\n    login,\r\n    signup,\r\n    logout\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}