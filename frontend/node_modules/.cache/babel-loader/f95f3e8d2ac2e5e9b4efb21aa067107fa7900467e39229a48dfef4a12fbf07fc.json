{"ast":null,"code":"import _objectSpread from\"C:/Users/DELL/Desktop/hrms/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useState,useEffect}from'react';import{useCertificates}from'./CertificateContext';import{useProfiles}from'./ProfileContext';import{getCertificateExpiryNotifications}from'../utils/notificationUtils';import{jsx as _jsx}from\"react/jsx-runtime\";const NotificationContext=/*#__PURE__*/createContext();export const useNotifications=()=>{const context=useContext(NotificationContext);if(!context){throw new Error('useNotifications must be used within a NotificationProvider');}return context;};export const NotificationProvider=_ref=>{let{children}=_ref;const[notifications,setNotifications]=useState([]);const[loading,setLoading]=useState(false);const[error,setError]=useState(null);const{certificates}=useCertificates();const{userProfile}=useProfiles();// Generate notifications based on certificate expiry\nuseEffect(()=>{if(certificates&&userProfile){generateNotifications();}},[certificates,userProfile]);const generateNotifications=()=>{try{// Generate certificate expiry notifications\nconst expiryNotifications=getCertificateExpiryNotifications(certificates,userProfile.email);// Add system notifications\nconst systemNotifications=[{id:\"system-welcome\",type:\"system\",priority:\"low\",message:\"Welcome to HRMS! Keep track of your certificates and profiles.\",title:\"Welcome to HRMS\",status:\"Open\",date:new Date().toLocaleDateString(),createdAt:new Date().toISOString(),read:false}];// Combine and format all notifications\nconst allNotifications=[...expiryNotifications,...systemNotifications].map(notif=>_objectSpread(_objectSpread({},notif),{},{title:notif.title||notif.message,status:notif.status||\"Open\",date:notif.date||new Date(notif.createdAt).toLocaleDateString()}));setNotifications(allNotifications);}catch(err){console.error('Error generating notifications:',err);setError('Failed to generate notifications');}};const markAsRead=notificationId=>{setNotifications(prev=>prev.map(notif=>notif.id===notificationId?_objectSpread(_objectSpread({},notif),{},{read:true}):notif));};const getUnreadCount=()=>{return notifications.filter(notif=>!notif.read).length;};const refreshNotifications=()=>{generateNotifications();};const value={notifications,loading,error,markAsRead,getUnreadCount,refreshNotifications};return/*#__PURE__*/_jsx(NotificationContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCertificates","useProfiles","getCertificateExpiryNotifications","jsx","_jsx","NotificationContext","useNotifications","context","Error","NotificationProvider","_ref","children","notifications","setNotifications","loading","setLoading","error","setError","certificates","userProfile","generateNotifications","expiryNotifications","email","systemNotifications","id","type","priority","message","title","status","date","Date","toLocaleDateString","createdAt","toISOString","read","allNotifications","map","notif","_objectSpread","err","console","markAsRead","notificationId","prev","getUnreadCount","filter","length","refreshNotifications","value","Provider"],"sources":["C:/Users/DELL/Desktop/hrms/frontend/src/context/NotificationContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { useCertificates } from './CertificateContext';\r\nimport { useProfiles } from './ProfileContext';\r\nimport { getCertificateExpiryNotifications } from '../utils/notificationUtils';\r\n\r\nconst NotificationContext = createContext();\r\n\r\nexport const useNotifications = () => {\r\n  const context = useContext(NotificationContext);\r\n  if (!context) {\r\n    throw new Error('useNotifications must be used within a NotificationProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const NotificationProvider = ({ children }) => {\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const { certificates } = useCertificates();\r\n  const { userProfile } = useProfiles();\r\n\r\n  // Generate notifications based on certificate expiry\r\n  useEffect(() => {\r\n    if (certificates && userProfile) {\r\n      generateNotifications();\r\n    }\r\n  }, [certificates, userProfile]);\r\n\r\n  const generateNotifications = () => {\r\n    try {\r\n      // Generate certificate expiry notifications\r\n      const expiryNotifications = getCertificateExpiryNotifications(certificates, userProfile.email);\r\n      \r\n      // Add system notifications\r\n      const systemNotifications = [\r\n        {\r\n          id: \"system-welcome\",\r\n          type: \"system\",\r\n          priority: \"low\",\r\n          message: \"Welcome to HRMS! Keep track of your certificates and profiles.\",\r\n          title: \"Welcome to HRMS\",\r\n          status: \"Open\",\r\n          date: new Date().toLocaleDateString(),\r\n          createdAt: new Date().toISOString(),\r\n          read: false\r\n        }\r\n      ];\r\n\r\n      // Combine and format all notifications\r\n      const allNotifications = [...expiryNotifications, ...systemNotifications].map(notif => ({\r\n        ...notif,\r\n        title: notif.title || notif.message,\r\n        status: notif.status || \"Open\",\r\n        date: notif.date || new Date(notif.createdAt).toLocaleDateString()\r\n      }));\r\n\r\n      setNotifications(allNotifications);\r\n    } catch (err) {\r\n      console.error('Error generating notifications:', err);\r\n      setError('Failed to generate notifications');\r\n    }\r\n  };\r\n\r\n  const markAsRead = (notificationId) => {\r\n    setNotifications(prev => \r\n      prev.map(notif => \r\n        notif.id === notificationId \r\n          ? { ...notif, read: true }\r\n          : notif\r\n      )\r\n    );\r\n  };\r\n\r\n  const getUnreadCount = () => {\r\n    return notifications.filter(notif => !notif.read).length;\r\n  };\r\n\r\n  const refreshNotifications = () => {\r\n    generateNotifications();\r\n  };\r\n\r\n  const value = {\r\n    notifications,\r\n    loading,\r\n    error,\r\n    markAsRead,\r\n    getUnreadCount,\r\n    refreshNotifications\r\n  };\r\n\r\n  return (\r\n    <NotificationContext.Provider value={value}>\r\n      {children}\r\n    </NotificationContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}