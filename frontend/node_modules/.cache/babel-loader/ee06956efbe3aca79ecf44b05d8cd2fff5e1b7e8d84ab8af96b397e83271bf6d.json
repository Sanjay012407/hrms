{"ast":null,"code":"// src/utils/notificationUtils.js\nexport const calculateDaysUntilExpiry = expiryDate => {\n  if (!expiryDate) return null;\n  const today = new Date();\n  const expiry = new Date(expiryDate);\n  const diffTime = expiry - today;\n  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n  return diffDays;\n};\nexport const getCertificateExpiryNotifications = (certificates, userEmail) => {\n  const notifications = [];\n  const today = new Date();\n  certificates.forEach(cert => {\n    if (!cert.expiryDate) return;\n    const daysUntilExpiry = calculateDaysUntilExpiry(cert.expiryDate);\n\n    // Create notifications for certificates expiring in 30, 14, 7, and 1 days\n    if (daysUntilExpiry <= 30 && daysUntilExpiry > 0) {\n      let priority = 'low';\n      let message = '';\n      if (daysUntilExpiry <= 1) {\n        priority = 'critical';\n        message = `Certificate \"${cert.certificate}\" expires today!`;\n      } else if (daysUntilExpiry <= 7) {\n        priority = 'high';\n        message = `Certificate \"${cert.certificate}\" expires in ${daysUntilExpiry} days`;\n      } else if (daysUntilExpiry <= 14) {\n        priority = 'medium';\n        message = `Certificate \"${cert.certificate}\" expires in ${daysUntilExpiry} days`;\n      } else {\n        priority = 'low';\n        message = `Certificate \"${cert.certificate}\" expires in ${daysUntilExpiry} days`;\n      }\n      notifications.push({\n        id: `cert-expiry-${cert.id || cert._id}`,\n        type: 'certificate_expiry',\n        priority,\n        message,\n        certificate: cert,\n        daysUntilExpiry,\n        userEmail,\n        createdAt: today.toISOString(),\n        read: false\n      });\n    } else if (daysUntilExpiry <= 0) {\n      // Certificate has already expired\n      notifications.push({\n        id: `cert-expired-${cert.id || cert._id}`,\n        type: 'certificate_expired',\n        priority: 'critical',\n        message: `Certificate \"${cert.certificate}\" has expired!`,\n        certificate: cert,\n        daysUntilExpiry,\n        userEmail,\n        createdAt: today.toISOString(),\n        read: false\n      });\n    }\n  });\n  return notifications.sort((a, b) => {\n    // Sort by priority: critical > high > medium > low\n    const priorityOrder = {\n      critical: 4,\n      high: 3,\n      medium: 2,\n      low: 1\n    };\n    return priorityOrder[b.priority] - priorityOrder[a.priority];\n  });\n};\nexport const generateEmailNotification = notification => {\n  const {\n    certificate,\n    daysUntilExpiry,\n    userEmail\n  } = notification;\n  let subject = '';\n  let body = '';\n  if (daysUntilExpiry <= 0) {\n    subject = `URGENT: Certificate \"${certificate.certificate}\" has expired`;\n    body = `\nDear User,\n\nYour certificate \"${certificate.certificate}\" has expired as of ${certificate.expiryDate}.\n\nCertificate Details:\n- Certificate Name: ${certificate.certificate}\n- Provider: ${certificate.provider || 'N/A'}\n- Expiry Date: ${certificate.expiryDate}\n- Status: EXPIRED\n\nPlease renew this certificate immediately to maintain compliance.\n\nBest regards,\nHRMS Team\n    `;\n  } else if (daysUntilExpiry <= 7) {\n    subject = `URGENT: Certificate \"${certificate.certificate}\" expires in ${daysUntilExpiry} days`;\n    body = `\nDear User,\n\nYour certificate \"${certificate.certificate}\" will expire in ${daysUntilExpiry} days.\n\nCertificate Details:\n- Certificate Name: ${certificate.certificate}\n- Provider: ${certificate.provider || 'N/A'}\n- Expiry Date: ${certificate.expiryDate}\n- Days Remaining: ${daysUntilExpiry}\n\nPlease take immediate action to renew this certificate.\n\nBest regards,\nHRMS Team\n    `;\n  } else {\n    subject = `Reminder: Certificate \"${certificate.certificate}\" expires in ${daysUntilExpiry} days`;\n    body = `\nDear User,\n\nThis is a reminder that your certificate \"${certificate.certificate}\" will expire in ${daysUntilExpiry} days.\n\nCertificate Details:\n- Certificate Name: ${certificate.certificate}\n- Provider: ${certificate.provider || 'N/A'}\n- Expiry Date: ${certificate.expiryDate}\n- Days Remaining: ${daysUntilExpiry}\n\nPlease plan to renew this certificate before it expires.\n\nBest regards,\nHRMS Team\n    `;\n  }\n  return {\n    to: userEmail,\n    subject,\n    body,\n    type: 'certificate_expiry',\n    certificateId: certificate.id || certificate._id\n  };\n};","map":{"version":3,"names":["calculateDaysUntilExpiry","expiryDate","today","Date","expiry","diffTime","diffDays","Math","ceil","getCertificateExpiryNotifications","certificates","userEmail","notifications","forEach","cert","daysUntilExpiry","priority","message","certificate","push","id","_id","type","createdAt","toISOString","read","sort","a","b","priorityOrder","critical","high","medium","low","generateEmailNotification","notification","subject","body","provider","to","certificateId"],"sources":["C:/Users/DELL/Desktop/hrm/frontend/src/utils/notificationUtils.js"],"sourcesContent":["// src/utils/notificationUtils.js\r\nexport const calculateDaysUntilExpiry = (expiryDate) => {\r\n  if (!expiryDate) return null;\r\n  \r\n  const today = new Date();\r\n  const expiry = new Date(expiryDate);\r\n  const diffTime = expiry - today;\r\n  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n  \r\n  return diffDays;\r\n};\r\n\r\nexport const getCertificateExpiryNotifications = (certificates, userEmail) => {\r\n  const notifications = [];\r\n  const today = new Date();\r\n  \r\n  certificates.forEach(cert => {\r\n    if (!cert.expiryDate) return;\r\n    \r\n    const daysUntilExpiry = calculateDaysUntilExpiry(cert.expiryDate);\r\n    \r\n    // Create notifications for certificates expiring in 30, 14, 7, and 1 days\r\n    if (daysUntilExpiry <= 30 && daysUntilExpiry > 0) {\r\n      let priority = 'low';\r\n      let message = '';\r\n      \r\n      if (daysUntilExpiry <= 1) {\r\n        priority = 'critical';\r\n        message = `Certificate \"${cert.certificate}\" expires today!`;\r\n      } else if (daysUntilExpiry <= 7) {\r\n        priority = 'high';\r\n        message = `Certificate \"${cert.certificate}\" expires in ${daysUntilExpiry} days`;\r\n      } else if (daysUntilExpiry <= 14) {\r\n        priority = 'medium';\r\n        message = `Certificate \"${cert.certificate}\" expires in ${daysUntilExpiry} days`;\r\n      } else {\r\n        priority = 'low';\r\n        message = `Certificate \"${cert.certificate}\" expires in ${daysUntilExpiry} days`;\r\n      }\r\n      \r\n      notifications.push({\r\n        id: `cert-expiry-${cert.id || cert._id}`,\r\n        type: 'certificate_expiry',\r\n        priority,\r\n        message,\r\n        certificate: cert,\r\n        daysUntilExpiry,\r\n        userEmail,\r\n        createdAt: today.toISOString(),\r\n        read: false\r\n      });\r\n    } else if (daysUntilExpiry <= 0) {\r\n      // Certificate has already expired\r\n      notifications.push({\r\n        id: `cert-expired-${cert.id || cert._id}`,\r\n        type: 'certificate_expired',\r\n        priority: 'critical',\r\n        message: `Certificate \"${cert.certificate}\" has expired!`,\r\n        certificate: cert,\r\n        daysUntilExpiry,\r\n        userEmail,\r\n        createdAt: today.toISOString(),\r\n        read: false\r\n      });\r\n    }\r\n  });\r\n  \r\n  return notifications.sort((a, b) => {\r\n    // Sort by priority: critical > high > medium > low\r\n    const priorityOrder = { critical: 4, high: 3, medium: 2, low: 1 };\r\n    return priorityOrder[b.priority] - priorityOrder[a.priority];\r\n  });\r\n};\r\n\r\nexport const generateEmailNotification = (notification) => {\r\n  const { certificate, daysUntilExpiry, userEmail } = notification;\r\n  \r\n  let subject = '';\r\n  let body = '';\r\n  \r\n  if (daysUntilExpiry <= 0) {\r\n    subject = `URGENT: Certificate \"${certificate.certificate}\" has expired`;\r\n    body = `\r\nDear User,\r\n\r\nYour certificate \"${certificate.certificate}\" has expired as of ${certificate.expiryDate}.\r\n\r\nCertificate Details:\r\n- Certificate Name: ${certificate.certificate}\r\n- Provider: ${certificate.provider || 'N/A'}\r\n- Expiry Date: ${certificate.expiryDate}\r\n- Status: EXPIRED\r\n\r\nPlease renew this certificate immediately to maintain compliance.\r\n\r\nBest regards,\r\nHRMS Team\r\n    `;\r\n  } else if (daysUntilExpiry <= 7) {\r\n    subject = `URGENT: Certificate \"${certificate.certificate}\" expires in ${daysUntilExpiry} days`;\r\n    body = `\r\nDear User,\r\n\r\nYour certificate \"${certificate.certificate}\" will expire in ${daysUntilExpiry} days.\r\n\r\nCertificate Details:\r\n- Certificate Name: ${certificate.certificate}\r\n- Provider: ${certificate.provider || 'N/A'}\r\n- Expiry Date: ${certificate.expiryDate}\r\n- Days Remaining: ${daysUntilExpiry}\r\n\r\nPlease take immediate action to renew this certificate.\r\n\r\nBest regards,\r\nHRMS Team\r\n    `;\r\n  } else {\r\n    subject = `Reminder: Certificate \"${certificate.certificate}\" expires in ${daysUntilExpiry} days`;\r\n    body = `\r\nDear User,\r\n\r\nThis is a reminder that your certificate \"${certificate.certificate}\" will expire in ${daysUntilExpiry} days.\r\n\r\nCertificate Details:\r\n- Certificate Name: ${certificate.certificate}\r\n- Provider: ${certificate.provider || 'N/A'}\r\n- Expiry Date: ${certificate.expiryDate}\r\n- Days Remaining: ${daysUntilExpiry}\r\n\r\nPlease plan to renew this certificate before it expires.\r\n\r\nBest regards,\r\nHRMS Team\r\n    `;\r\n  }\r\n  \r\n  return {\r\n    to: userEmail,\r\n    subject,\r\n    body,\r\n    type: 'certificate_expiry',\r\n    certificateId: certificate.id || certificate._id\r\n  };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}