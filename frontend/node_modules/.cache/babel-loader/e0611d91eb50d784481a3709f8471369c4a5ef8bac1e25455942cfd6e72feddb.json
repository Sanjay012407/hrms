{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\hrms\\\\frontend\\\\src\\\\context\\\\NotificationContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useCertificates } from './CertificateContext';\nimport { useProfiles } from './ProfileContext';\nimport { getCertificateExpiryNotifications } from '../utils/notificationUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationContext = /*#__PURE__*/createContext();\nexport const useNotifications = () => {\n  _s();\n  const context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n};\n_s(useNotifications, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s2();\n  const [notifications, setNotifications] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const {\n    certificates\n  } = useCertificates();\n  const {\n    userProfile\n  } = useProfiles();\n\n  // Generate notifications based on certificate expiry\n  useEffect(() => {\n    if (certificates && userProfile) {\n      generateNotifications();\n    }\n  }, [certificates, userProfile]);\n  const generateNotifications = () => {\n    try {\n      // Generate certificate expiry notifications\n      const expiryNotifications = getCertificateExpiryNotifications(certificates, userProfile.email);\n\n      // Add system notifications\n      const systemNotifications = [{\n        id: \"system-welcome\",\n        type: \"system\",\n        priority: \"low\",\n        message: \"Welcome to HRMS! Keep track of your certificates and profiles.\",\n        title: \"Welcome to HRMS\",\n        status: \"Open\",\n        date: new Date().toLocaleDateString(),\n        createdAt: new Date().toISOString(),\n        read: false\n      }];\n\n      // Combine and format all notifications\n      const allNotifications = [...expiryNotifications, ...systemNotifications].map(notif => ({\n        ...notif,\n        title: notif.title || notif.message,\n        status: notif.status || \"Open\",\n        date: notif.date || new Date(notif.createdAt).toLocaleDateString()\n      }));\n      setNotifications(allNotifications);\n    } catch (err) {\n      console.error('Error generating notifications:', err);\n      setError('Failed to generate notifications');\n    }\n  };\n  const markAsRead = notificationId => {\n    setNotifications(prev => prev.map(notif => notif.id === notificationId ? {\n      ...notif,\n      read: true\n    } : notif));\n  };\n  const getUnreadCount = () => {\n    return notifications.filter(notif => !notif.read).length;\n  };\n  const refreshNotifications = () => {\n    generateNotifications();\n  };\n  const value = {\n    notifications,\n    loading,\n    error,\n    markAsRead,\n    getUnreadCount,\n    refreshNotifications\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s2(NotificationProvider, \"J+PKaHSKTwGwPSU7oYjBigiUqdU=\", false, function () {\n  return [useCertificates, useProfiles];\n});\n_c = NotificationProvider;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCertificates","useProfiles","getCertificateExpiryNotifications","jsxDEV","_jsxDEV","NotificationContext","useNotifications","_s","context","Error","NotificationProvider","children","_s2","notifications","setNotifications","loading","setLoading","error","setError","certificates","userProfile","generateNotifications","expiryNotifications","email","systemNotifications","id","type","priority","message","title","status","date","Date","toLocaleDateString","createdAt","toISOString","read","allNotifications","map","notif","err","console","markAsRead","notificationId","prev","getUnreadCount","filter","length","refreshNotifications","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/hrms/frontend/src/context/NotificationContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { useCertificates } from './CertificateContext';\r\nimport { useProfiles } from './ProfileContext';\r\nimport { getCertificateExpiryNotifications } from '../utils/notificationUtils';\r\n\r\nconst NotificationContext = createContext();\r\n\r\nexport const useNotifications = () => {\r\n  const context = useContext(NotificationContext);\r\n  if (!context) {\r\n    throw new Error('useNotifications must be used within a NotificationProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const NotificationProvider = ({ children }) => {\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const { certificates } = useCertificates();\r\n  const { userProfile } = useProfiles();\r\n\r\n  // Generate notifications based on certificate expiry\r\n  useEffect(() => {\r\n    if (certificates && userProfile) {\r\n      generateNotifications();\r\n    }\r\n  }, [certificates, userProfile]);\r\n\r\n  const generateNotifications = () => {\r\n    try {\r\n      // Generate certificate expiry notifications\r\n      const expiryNotifications = getCertificateExpiryNotifications(certificates, userProfile.email);\r\n      \r\n      // Add system notifications\r\n      const systemNotifications = [\r\n        {\r\n          id: \"system-welcome\",\r\n          type: \"system\",\r\n          priority: \"low\",\r\n          message: \"Welcome to HRMS! Keep track of your certificates and profiles.\",\r\n          title: \"Welcome to HRMS\",\r\n          status: \"Open\",\r\n          date: new Date().toLocaleDateString(),\r\n          createdAt: new Date().toISOString(),\r\n          read: false\r\n        }\r\n      ];\r\n\r\n      // Combine and format all notifications\r\n      const allNotifications = [...expiryNotifications, ...systemNotifications].map(notif => ({\r\n        ...notif,\r\n        title: notif.title || notif.message,\r\n        status: notif.status || \"Open\",\r\n        date: notif.date || new Date(notif.createdAt).toLocaleDateString()\r\n      }));\r\n\r\n      setNotifications(allNotifications);\r\n    } catch (err) {\r\n      console.error('Error generating notifications:', err);\r\n      setError('Failed to generate notifications');\r\n    }\r\n  };\r\n\r\n  const markAsRead = (notificationId) => {\r\n    setNotifications(prev => \r\n      prev.map(notif => \r\n        notif.id === notificationId \r\n          ? { ...notif, read: true }\r\n          : notif\r\n      )\r\n    );\r\n  };\r\n\r\n  const getUnreadCount = () => {\r\n    return notifications.filter(notif => !notif.read).length;\r\n  };\r\n\r\n  const refreshNotifications = () => {\r\n    generateNotifications();\r\n  };\r\n\r\n  const value = {\r\n    notifications,\r\n    loading,\r\n    error,\r\n    markAsRead,\r\n    getUnreadCount,\r\n    refreshNotifications\r\n  };\r\n\r\n  return (\r\n    <NotificationContext.Provider value={value}>\r\n      {children}\r\n    </NotificationContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}