{"ast":null,"code":"import _objectSpread from\"/root/hrms/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useState,useEffect}from'react';import axios from'axios';import{jsx as _jsx}from\"react/jsx-runtime\";const CertificateContext=/*#__PURE__*/createContext();const API_BASE_URL=process.env.REACT_APP_API_BASE_URL;export const useCertificates=()=>{const context=useContext(CertificateContext);if(!context){throw new Error('useCertificates must be used within a CertificateProvider');}return context;};export const CertificateProvider=_ref=>{let{children}=_ref;const[certificates,setCertificates]=useState([]);const[loading,setLoading]=useState(false);const[error,setError]=useState(null);// Fetch certificates from API\nconst fetchCertificates=async()=>{setLoading(true);try{const response=await axios.get(\"\".concat(API_BASE_URL,\"/certificates\"));setCertificates(response.data);setError(null);}catch(err){setError('Failed to fetch certificates');console.error('Error fetching certificates:',err);setCertificates([]);}finally{setLoading(false);}};// Load certificates on mount\nuseEffect(()=>{fetchCertificates();},[]);// Add certificate with file upload support\nconst addCertificate=async newCertificate=>{setLoading(true);try{// Create FormData for file upload\nconst formData=new FormData();// Add all certificate fields to FormData\nObject.keys(newCertificate).forEach(key=>{if(key==='fileData'&&newCertificate[key]){// Handle file upload\nformData.append('certificateFile',newCertificate[key]);}else if(key==='timeLogged'&&typeof newCertificate[key]==='object'){// Handle timeLogged object\nformData.append('timeLogged',JSON.stringify(newCertificate[key]));}else if(newCertificate[key]!==null&&newCertificate[key]!==undefined){formData.append(key,newCertificate[key]);}});const response=await axios.post(\"\".concat(API_BASE_URL,\"/certificates\"),formData,{headers:{'Content-Type':'multipart/form-data'}});setCertificates(prev=>[response.data,...prev]);setError(null);return response.data;}catch(err){setError('Failed to add certificate');console.error('Error adding certificate:',err);throw err;}finally{setLoading(false);}};// Update certificate\nconst updateCertificate=async(id,updatedCertificate)=>{setLoading(true);try{const response=await axios.put(\"\".concat(API_BASE_URL,\"/certificates/\").concat(id),updatedCertificate);setCertificates(prev=>prev.map(cert=>cert._id===id?response.data:cert));setError(null);return response.data;}catch(err){setError('Failed to update certificate');console.error('Error updating certificate:',err);throw err;}finally{setLoading(false);}};// Update certificate with file upload\nconst updateCertificateWithFile=async(id,formData)=>{try{const token=localStorage.getItem('authToken');const response=await axios.put(\"\".concat(API_BASE_URL,\"/certificates/\").concat(id,\"/upload\"),formData,{headers:_objectSpread({},token&&{'Authorization':\"Bearer \".concat(token)})});// Update local state\nsetCertificates(prev=>prev.map(cert=>(cert.id||cert._id)===id?response.data:cert));return response.data;}catch(error){var _error$response;console.error('Error updating certificate with file:',error);console.error('Error response:',(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.data);throw error;}};// Delete certificate\nconst deleteCertificate=async id=>{setLoading(true);try{await axios.delete(\"\".concat(API_BASE_URL,\"/certificates/\").concat(id));setCertificates(prev=>prev.filter(cert=>cert._id!==id));setError(null);}catch(err){setError('Failed to delete certificate');console.error('Error deleting certificate:',err);throw err;}finally{setLoading(false);}};// Get certificate by ID\nconst getCertificateById=id=>{return certificates.find(cert=>cert._id===id||cert.id===id);};// Get active certificates count\nconst getActiveCertificatesCount=()=>{if(!Array.isArray(certificates)){console.error(\"Expected an array of certificates, but got:\",certificates);return 0;}return certificates.filter(cert=>cert.active==='Yes'||cert.status==='Active').length;};// Get expiring certificates within specified days\nconst getExpiringCertificates=function(){let days=arguments.length>0&&arguments[0]!==undefined?arguments[0]:30;if(!Array.isArray(certificates)){console.error(\"Expected an array of certificates, but got:\",certificates);return[];}const today=new Date();const futureDate=new Date();futureDate.setDate(today.getDate()+days);return certificates.filter(cert=>{if(!cert.expiryDate)return false;const[day,month,year]=cert.expiryDate.split('/');const expiryDate=new Date(year,month-1,day);return expiryDate>=today&&expiryDate<=futureDate;});};// Get expired certificates\nconst getExpiredCertificates=()=>{const today=new Date();return certificates.filter(cert=>{if(!cert.expiryDate)return false;const[day,month,year]=cert.expiryDate.split('/');const expiryDate=new Date(year,month-1,day);return expiryDate<today;});};// Get certificates by category\nconst getCertificatesByCategory=()=>{const categoryCounts={};certificates.forEach(cert=>{const category=cert.category||'Other';categoryCounts[category]=(categoryCounts[category]||0)+1;});return categoryCounts;};// Get certificates by job role\nconst getCertificatesByJobRole=()=>{const jobRoleCounts={};certificates.forEach(cert=>{const jobRole=cert.jobRole||'Unspecified';jobRoleCounts[jobRole]=(jobRoleCounts[jobRole]||0)+1;});return jobRoleCounts;};const value={certificates,loading,error,fetchCertificates,addCertificate,updateCertificate,updateCertificateWithFile,deleteCertificate,getCertificateById,getActiveCertificatesCount,getExpiringCertificates,getExpiredCertificates,getCertificatesByCategory,getCertificatesByJobRole};return/*#__PURE__*/_jsx(CertificateContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","jsx","_jsx","CertificateContext","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","useCertificates","context","Error","CertificateProvider","_ref","children","certificates","setCertificates","loading","setLoading","error","setError","fetchCertificates","response","get","concat","data","err","console","addCertificate","newCertificate","formData","FormData","Object","keys","forEach","key","append","JSON","stringify","undefined","post","headers","prev","updateCertificate","id","updatedCertificate","put","map","cert","_id","updateCertificateWithFile","token","localStorage","getItem","_objectSpread","_error$response","deleteCertificate","delete","filter","getCertificateById","find","getActiveCertificatesCount","Array","isArray","active","status","length","getExpiringCertificates","days","arguments","today","Date","futureDate","setDate","getDate","expiryDate","day","month","year","split","getExpiredCertificates","getCertificatesByCategory","categoryCounts","category","getCertificatesByJobRole","jobRoleCounts","jobRole","value","Provider"],"sources":["/root/hrms/frontend/src/context/CertificateContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst CertificateContext = createContext();\n\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL;\n\nexport const useCertificates = () => {\n  const context = useContext(CertificateContext);\n  if (!context) {\n    throw new Error('useCertificates must be used within a CertificateProvider');\n  }\n  return context;\n};\n\nexport const CertificateProvider = ({ children }) => {\n  const [certificates, setCertificates] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Fetch certificates from API\n  const fetchCertificates = async () => {\n    setLoading(true);\n    try {\n      const response = await axios.get(`${API_BASE_URL}/certificates`);\n      setCertificates(response.data);\n      setError(null);\n    } catch (err) {\n      setError('Failed to fetch certificates');\n      console.error('Error fetching certificates:', err);\n      setCertificates([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Load certificates on mount\n  useEffect(() => {\n    fetchCertificates();\n  }, []);\n\n  // Add certificate with file upload support\n  const addCertificate = async (newCertificate) => {\n    setLoading(true);\n    try {\n      // Create FormData for file upload\n      const formData = new FormData();\n      \n      // Add all certificate fields to FormData\n      Object.keys(newCertificate).forEach(key => {\n        if (key === 'fileData' && newCertificate[key]) {\n          // Handle file upload\n          formData.append('certificateFile', newCertificate[key]);\n        } else if (key === 'timeLogged' && typeof newCertificate[key] === 'object') {\n          // Handle timeLogged object\n          formData.append('timeLogged', JSON.stringify(newCertificate[key]));\n        } else if (newCertificate[key] !== null && newCertificate[key] !== undefined) {\n          formData.append(key, newCertificate[key]);\n        }\n      });\n      \n      const response = await axios.post(`${API_BASE_URL}/certificates`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      });\n      \n      setCertificates(prev => [response.data, ...prev]);\n      setError(null);\n      return response.data;\n    } catch (err) {\n      setError('Failed to add certificate');\n      console.error('Error adding certificate:', err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Update certificate\n  const updateCertificate = async (id, updatedCertificate) => {\n    setLoading(true);\n    try {\n      const response = await axios.put(`${API_BASE_URL}/certificates/${id}`, updatedCertificate);\n      setCertificates(prev => \n        prev.map(cert => cert._id === id ? response.data : cert)\n      );\n      setError(null);\n      return response.data;\n    } catch (err) {\n      setError('Failed to update certificate');\n      console.error('Error updating certificate:', err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Update certificate with file upload\n  const updateCertificateWithFile = async (id, formData) => {\n    try {\n      const token = localStorage.getItem('authToken');\n      const response = await axios.put(`${API_BASE_URL}/certificates/${id}/upload`, formData, {\n        headers: {\n          // Don't set Content-Type - let browser set it with boundary for multipart/form-data\n          ...(token && { 'Authorization': `Bearer ${token}` })\n        }\n      });\n      \n      // Update local state\n      setCertificates(prev => prev.map(cert => \n        (cert.id || cert._id) === id ? response.data : cert\n      ));\n      \n      return response.data;\n    } catch (error) {\n      console.error('Error updating certificate with file:', error);\n      console.error('Error response:', error.response?.data);\n      throw error;\n    }\n  };\n\n  // Delete certificate\n  const deleteCertificate = async (id) => {\n    setLoading(true);\n    try {\n      await axios.delete(`${API_BASE_URL}/certificates/${id}`);\n      setCertificates(prev => prev.filter(cert => cert._id !== id));\n      setError(null);\n    } catch (err) {\n      setError('Failed to delete certificate');\n      console.error('Error deleting certificate:', err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Get certificate by ID\n  const getCertificateById = (id) => {\n    return certificates.find(cert => cert._id === id || cert.id === id);\n  };\n\n  // Get active certificates count\n  const getActiveCertificatesCount = () => {\n    if (!Array.isArray(certificates)) {\n      console.error(\"Expected an array of certificates, but got:\", certificates);\n      return 0;\n    }\n\n    return certificates.filter(cert => cert.active === 'Yes' || cert.status === 'Active').length;\n  };\n\n  // Get expiring certificates within specified days\n  const getExpiringCertificates = (days = 30) => {\n    if (!Array.isArray(certificates)) {\n      console.error(\"Expected an array of certificates, but got:\", certificates);\n      return [];\n    }\n\n    const today = new Date();\n    const futureDate = new Date();\n    futureDate.setDate(today.getDate() + days);\n\n    return certificates.filter(cert => {\n      if (!cert.expiryDate) return false;\n      \n      const [day, month, year] = cert.expiryDate.split('/');\n      const expiryDate = new Date(year, month - 1, day);\n      \n      return expiryDate >= today && expiryDate <= futureDate;\n    });\n  };\n\n  // Get expired certificates\n  const getExpiredCertificates = () => {\n    const today = new Date();\n    \n    return certificates.filter(cert => {\n      if (!cert.expiryDate) return false;\n      \n      const [day, month, year] = cert.expiryDate.split('/');\n      const expiryDate = new Date(year, month - 1, day);\n      \n      return expiryDate < today;\n    });\n  };\n\n  // Get certificates by category\n  const getCertificatesByCategory = () => {\n    const categoryCounts = {};\n    certificates.forEach(cert => {\n      const category = cert.category || 'Other';\n      categoryCounts[category] = (categoryCounts[category] || 0) + 1;\n    });\n    return categoryCounts;\n  };\n\n  // Get certificates by job role\n  const getCertificatesByJobRole = () => {\n    const jobRoleCounts = {};\n    certificates.forEach(cert => {\n      const jobRole = cert.jobRole || 'Unspecified';\n      jobRoleCounts[jobRole] = (jobRoleCounts[jobRole] || 0) + 1;\n    });\n    return jobRoleCounts;\n  };\n\n  const value = {\n    certificates,\n    loading,\n    error,\n    fetchCertificates,\n    addCertificate,\n    updateCertificate,\n    updateCertificateWithFile,\n    deleteCertificate,\n    getCertificateById,\n    getActiveCertificatesCount,\n    getExpiringCertificates,\n    getExpiredCertificates,\n    getCertificatesByCategory,\n    getCertificatesByJobRole\n  };\n\n  return (\n    <CertificateContext.Provider value={value}>\n      {children}\n    </CertificateContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}