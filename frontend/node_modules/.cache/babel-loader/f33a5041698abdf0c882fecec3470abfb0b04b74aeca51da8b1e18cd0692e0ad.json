{"ast":null,"code":"// src/context/AuthContext.js\nimport React,{createContext,useContext,useState,useEffect,useCallback}from\"react\";import axios from\"axios\";import{getErrorMessage}from'../utils/errorHandler';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error(\"useAuth must be used within an AuthProvider\");}return context;};const getApiUrl=()=>{var _process$env$REACT_AP;// In development, use localhost URL\nif(process.env.NODE_ENV==='development'&&process.env.REACT_APP_API_URL){return process.env.REACT_APP_API_URL;}// In production or when API_BASE_URL is relative, use relative path\nif((_process$env$REACT_AP=process.env.REACT_APP_API_BASE_URL)!==null&&_process$env$REACT_AP!==void 0&&_process$env$REACT_AP.startsWith('/')){return'';}// Fallback to localhost for development\nreturn process.env.REACT_APP_API_URL||'http://localhost:5003';};const API_BASE_URL=\"\".concat(getApiUrl());// Configure axios to include credentials (cookies) with requests\naxios.defaults.withCredentials=true;export const AuthProvider=_ref=>{let{children}=_ref;// Session storage utilities - only for authentication state\nconst sessionStorage={// Store user session data\nsetUserSession:function(userData){let token=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;try{localStorage.setItem('user_session',JSON.stringify({user:userData,timestamp:Date.now(),expiresAt:Date.now()+24*60*60*1000// 24 hours\n}));if(token){localStorage.setItem('auth_token',token);}}catch(error){console.error('Error storing session:',error);}},// Get user session data\ngetUserSession:()=>{try{const sessionData=localStorage.getItem('user_session');if(sessionData){const parsed=JSON.parse(sessionData);// Check if session is expired\nif(parsed.expiresAt&&Date.now()>parsed.expiresAt){sessionStorage.clearSession();return null;}return parsed;}}catch(error){console.error('Error reading session:',error);sessionStorage.clearSession();}return null;},// Clear all session data\nclearSession:()=>{try{localStorage.removeItem('user_session');localStorage.removeItem('auth_token');localStorage.removeItem('session_cookie');}catch(error){console.error('Error clearing session:',error);}},// Store session cookie for backend communication\nsetSessionCookie:cookieValue=>{try{localStorage.setItem('session_cookie',cookieValue);}catch(error){console.error('Error storing session cookie:',error);}},// Get auth token\ngetAuthToken:()=>{try{return localStorage.getItem('auth_token');}catch(error){console.error('Error reading auth token:',error);return null;}}};// Initialize state from session storage\nconst getInitialState=()=>{const sessionData=sessionStorage.getUserSession();if(sessionData&&sessionData.user){return{user:sessionData.user,isAuthenticated:true};}return{user:null,isAuthenticated:false};};const initialState=getInitialState();const[user,setUser]=useState(initialState.user);const[isAuthenticated,setIsAuthenticated]=useState(initialState.isAuthenticated);const[loading,setLoading]=useState(false);const[error,setError]=useState(null);// Store session cookie for session maintenance\nconst storeSessionCookie=()=>{const cookies=document.cookie.split(';');const sessionCookie=cookies.find(cookie=>cookie.trim().startsWith('talentshield.sid='));if(sessionCookie){console.log('Session cookie captured:',sessionCookie);sessionStorage.setSessionCookie(sessionCookie);}else{sessionStorage.clearSession();}};const checkExistingSession=useCallback(async()=>{try{const sessionData=sessionStorage.getUserSession();if(sessionData&&sessionData.user){try{await axios.get(\"\".concat(API_BASE_URL,\"/api/auth/validate-session\"),{withCredentials:true,timeout:5000});// Session is valid, no action needed\n}catch(error){var _error$response,_error$response2;// Session invalid, clear it\nif(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===403||((_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.status)===401){handleInvalidSession();}}}}catch(error){console.error('Error checking session:',error);// Don't clear session on network errors, only on auth errors\n}},[]);// Check for existing session on app start\nuseEffect(()=>{let isMounted=true;// Only run background validation if user is not already set\nif(!user&&isMounted){checkExistingSession();}// Listen for localStorage changes to sync across tabs (session management only)\nconst handleStorageChange=e=>{if(!isMounted)return;if(e.key==='user_session'){if(e.newValue){try{const sessionData=JSON.parse(e.newValue);if(sessionData.user&&isMounted){setUser(sessionData.user);setIsAuthenticated(true);}}catch(error){console.error('Error parsing session storage change:',error);}}else{// Session was removed\nif(isMounted){setUser(null);setIsAuthenticated(false);}}}};window.addEventListener('storage',handleStorageChange);return()=>{isMounted=false;window.removeEventListener('storage',handleStorageChange);};},[user,checkExistingSession]);const login=async function(email,password){let rememberMe=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;setLoading(true);setError(null);try{const response=await axios.post(\"\".concat(API_BASE_URL,\"/api/auth/login\"),{email,password,rememberMe},{timeout:10000,withCredentials:true});const{token,user:userData}=response.data;if(!userData){throw new Error('Invalid response from server');}// Store session data using our session storage utility\nsessionStorage.setUserSession(userData,token);// Update state - session is automatically handled by cookies\nsetUser(userData);setIsAuthenticated(true);return{success:true,user:userData};}catch(err){const errorMessage=getErrorMessage(err);setError(errorMessage);return{success:false,error:errorMessage};}finally{setLoading(false);}};const signup=async userData=>{setLoading(true);setError(null);try{const response=await axios.post(\"\".concat(API_BASE_URL,\"/api/auth/signup\"),userData,{timeout:10000,withCredentials:true});return{success:true,message:\"Account created successfully\"};}catch(err){const errorMessage=getErrorMessage(err);setError(errorMessage);return{success:false,error:errorMessage};}finally{setLoading(false);}};const logout=async()=>{setLoading(true);try{// Call backend logout endpoint to destroy session\nawait axios.post(\"\".concat(API_BASE_URL,\"/api/auth/logout\"));}catch(err){console.error(\"Logout error:\",err);}finally{// Clear session data using our session storage utility\nsessionStorage.clearSession();setUser(null);setIsAuthenticated(false);setError(null);setLoading(false);}};const handleInvalidSession=()=>{console.log(\"Invalid session. Clearing user data.\");sessionStorage.clearSession();setUser(null);setIsAuthenticated(false);};const value={user,isAuthenticated,loading,error,login,signup,logout,storeSessionCookie};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","axios","getErrorMessage","jsx","_jsx","AuthContext","useAuth","context","Error","getApiUrl","_process$env$REACT_AP","process","env","NODE_ENV","REACT_APP_API_URL","REACT_APP_API_BASE_URL","startsWith","API_BASE_URL","concat","defaults","withCredentials","AuthProvider","_ref","children","sessionStorage","setUserSession","userData","token","arguments","length","undefined","localStorage","setItem","JSON","stringify","user","timestamp","Date","now","expiresAt","error","console","getUserSession","sessionData","getItem","parsed","parse","clearSession","removeItem","setSessionCookie","cookieValue","getAuthToken","getInitialState","isAuthenticated","initialState","setUser","setIsAuthenticated","loading","setLoading","setError","storeSessionCookie","cookies","document","cookie","split","sessionCookie","find","trim","log","checkExistingSession","get","timeout","_error$response","_error$response2","response","status","handleInvalidSession","isMounted","handleStorageChange","e","key","newValue","window","addEventListener","removeEventListener","login","email","password","rememberMe","post","data","success","err","errorMessage","signup","message","logout","value","Provider"],"sources":["C:/Users/DELL/Desktop/hrms/frontend/src/context/AuthContext.js"],"sourcesContent":["// src/context/AuthContext.js\r\nimport React, { createContext, useContext, useState, useEffect, useCallback } from \"react\";\r\nimport axios from \"axios\";\r\nimport { getErrorMessage } from '../utils/errorHandler';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error(\"useAuth must be used within an AuthProvider\");\r\n  }\r\n  return context;\r\n};\r\n\r\nconst getApiUrl = () => {\r\n  // In development, use localhost URL\r\n  if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_API_URL) {\r\n    return process.env.REACT_APP_API_URL;\r\n  }\r\n  // In production or when API_BASE_URL is relative, use relative path\r\n  if (process.env.REACT_APP_API_BASE_URL?.startsWith('/')) {\r\n    return '';\r\n  }\r\n  // Fallback to localhost for development\r\n  return process.env.REACT_APP_API_URL || 'http://localhost:5003';\r\n};\r\n\r\nconst API_BASE_URL = `${getApiUrl()}`;\r\n\r\n// Configure axios to include credentials (cookies) with requests\r\naxios.defaults.withCredentials = true;\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  // Session storage utilities - only for authentication state\r\n  const sessionStorage = {\r\n    // Store user session data\r\n    setUserSession: (userData, token = null) => {\r\n      try {\r\n        localStorage.setItem('user_session', JSON.stringify({\r\n          user: userData,\r\n          timestamp: Date.now(),\r\n          expiresAt: Date.now() + (24 * 60 * 60 * 1000) // 24 hours\r\n        }));\r\n        if (token) {\r\n          localStorage.setItem('auth_token', token);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error storing session:', error);\r\n      }\r\n    },\r\n\r\n    // Get user session data\r\n    getUserSession: () => {\r\n      try {\r\n        const sessionData = localStorage.getItem('user_session');\r\n        if (sessionData) {\r\n          const parsed = JSON.parse(sessionData);\r\n          // Check if session is expired\r\n          if (parsed.expiresAt && Date.now() > parsed.expiresAt) {\r\n            sessionStorage.clearSession();\r\n            return null;\r\n          }\r\n          return parsed;\r\n        }\r\n      } catch (error) {\r\n        console.error('Error reading session:', error);\r\n        sessionStorage.clearSession();\r\n      }\r\n      return null;\r\n    },\r\n\r\n    // Clear all session data\r\n    clearSession: () => {\r\n      try {\r\n        localStorage.removeItem('user_session');\r\n        localStorage.removeItem('auth_token');\r\n        localStorage.removeItem('session_cookie');\r\n      } catch (error) {\r\n        console.error('Error clearing session:', error);\r\n      }\r\n    },\r\n\r\n    // Store session cookie for backend communication\r\n    setSessionCookie: (cookieValue) => {\r\n      try {\r\n        localStorage.setItem('session_cookie', cookieValue);\r\n      } catch (error) {\r\n        console.error('Error storing session cookie:', error);\r\n      }\r\n    },\r\n\r\n    // Get auth token\r\n    getAuthToken: () => {\r\n      try {\r\n        return localStorage.getItem('auth_token');\r\n      } catch (error) {\r\n        console.error('Error reading auth token:', error);\r\n        return null;\r\n      }\r\n    }\r\n  };\r\n\r\n  // Initialize state from session storage\r\n  const getInitialState = () => {\r\n    const sessionData = sessionStorage.getUserSession();\r\n    if (sessionData && sessionData.user) {\r\n      return {\r\n        user: sessionData.user,\r\n        isAuthenticated: true\r\n      };\r\n    }\r\n    return {\r\n      user: null,\r\n      isAuthenticated: false\r\n    };\r\n  };\r\n\r\n  const initialState = getInitialState();\r\n  const [user, setUser] = useState(initialState.user);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(initialState.isAuthenticated);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Store session cookie for session maintenance\r\n  const storeSessionCookie = () => {\r\n    const cookies = document.cookie.split(';');\r\n    const sessionCookie = cookies.find(cookie => cookie.trim().startsWith('talentshield.sid='));\r\n\r\n    if (sessionCookie) {\r\n      console.log('Session cookie captured:', sessionCookie);\r\n      sessionStorage.setSessionCookie(sessionCookie);\r\n    } else {\r\n      sessionStorage.clearSession();\r\n    }\r\n  };\r\n\r\n  const checkExistingSession = useCallback(async () => {\r\n    try {\r\n      const sessionData = sessionStorage.getUserSession();\r\n      if (sessionData && sessionData.user) {\r\n        try {\r\n          await axios.get(`${API_BASE_URL}/api/auth/validate-session`, {\r\n            withCredentials: true,\r\n            timeout: 5000\r\n          });\r\n          // Session is valid, no action needed\r\n        } catch (error) {\r\n          // Session invalid, clear it\r\n          if (error.response?.status === 403 || error.response?.status === 401) {\r\n            handleInvalidSession();\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error checking session:', error);\r\n      // Don't clear session on network errors, only on auth errors\r\n    }\r\n  }, []);\r\n\r\n  // Check for existing session on app start\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    \r\n    // Only run background validation if user is not already set\r\n    if (!user && isMounted) {\r\n      checkExistingSession();\r\n    }\r\n\r\n    // Listen for localStorage changes to sync across tabs (session management only)\r\n    const handleStorageChange = (e) => {\r\n      if (!isMounted) return;\r\n      \r\n      if (e.key === 'user_session') {\r\n        if (e.newValue) {\r\n          try {\r\n            const sessionData = JSON.parse(e.newValue);\r\n            if (sessionData.user && isMounted) {\r\n              setUser(sessionData.user);\r\n              setIsAuthenticated(true);\r\n            }\r\n          } catch (error) {\r\n            console.error('Error parsing session storage change:', error);\r\n          }\r\n        } else {\r\n          // Session was removed\r\n          if (isMounted) {\r\n            setUser(null);\r\n            setIsAuthenticated(false);\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    window.addEventListener('storage', handleStorageChange);\r\n    return () => {\r\n      isMounted = false;\r\n      window.removeEventListener('storage', handleStorageChange);\r\n    };\r\n  }, [user, checkExistingSession]);\r\n\r\n\r\n  const login = async (email, password, rememberMe = false) => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}/api/auth/login`, {\r\n        email,\r\n        password,\r\n        rememberMe\r\n      }, {\r\n        timeout: 10000,\r\n        withCredentials: true\r\n      });\r\n\r\n      const { token, user: userData } = response.data;\r\n\r\n      if (!userData) {\r\n        throw new Error('Invalid response from server');\r\n      }\r\n\r\n      // Store session data using our session storage utility\r\n      sessionStorage.setUserSession(userData, token);\r\n\r\n      // Update state - session is automatically handled by cookies\r\n      setUser(userData);\r\n      setIsAuthenticated(true);\r\n\r\n      return { success: true, user: userData };\r\n    } catch (err) {\r\n      const errorMessage = getErrorMessage(err);\r\n      setError(errorMessage);\r\n      return { success: false, error: errorMessage };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const signup = async (userData) => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}/api/auth/signup`, userData, {\r\n        timeout: 10000,\r\n        withCredentials: true\r\n      });\r\n\r\n      return { success: true, message: \"Account created successfully\" };\r\n    } catch (err) {\r\n      const errorMessage = getErrorMessage(err);\r\n      setError(errorMessage);\r\n      return { success: false, error: errorMessage };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    setLoading(true);\r\n    try {\r\n      // Call backend logout endpoint to destroy session\r\n      await axios.post(`${API_BASE_URL}/api/auth/logout`);\r\n    } catch (err) {\r\n      console.error(\"Logout error:\", err);\r\n    } finally {\r\n      // Clear session data using our session storage utility\r\n      sessionStorage.clearSession();\r\n      setUser(null);\r\n      setIsAuthenticated(false);\r\n      setError(null);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleInvalidSession = () => {\r\n    console.log(\"Invalid session. Clearing user data.\");\r\n    sessionStorage.clearSession();\r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    isAuthenticated,\r\n    loading,\r\n    error,\r\n    login,\r\n    signup,\r\n    logout,\r\n    storeSessionCookie\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}