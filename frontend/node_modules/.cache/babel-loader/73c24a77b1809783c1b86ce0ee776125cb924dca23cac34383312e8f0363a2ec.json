{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\hrms\\\\frontend\\\\src\\\\context\\\\ProfileContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useAuth } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProfileContext = /*#__PURE__*/createContext();\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL;\nconst getApiUrl = () => {\n  // In development, use localhost URL\n  if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_API_URL) {\n    return process.env.REACT_APP_API_URL;\n  }\n\n  // In production, use the environment variable or fallback\n  return process.env.REACT_APP_API_URL || 'http://localhost:5003';\n};\nexport const useProfiles = () => {\n  _s();\n  const context = useContext(ProfileContext);\n  if (!context) {\n    throw new Error('useProfiles must be used within a ProfileProvider');\n  }\n  return context;\n};\n_s(useProfiles, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const ProfileProvider = ({\n  children\n}) => {\n  _s2();\n  const [profiles, setProfiles] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const {\n    user\n  } = useAuth();\n\n  // Fetch profiles from API with optimization and persistence\n  const fetchProfiles = async (forceRefresh = false, usePagination = false, page = 1, limit = 20) => {\n    setLoading(true);\n    try {\n      console.log('Fetching profiles from API (optimized)');\n\n      // Check cache first unless force refresh\n      if (!forceRefresh && !usePagination) {\n        const cachedProfiles = localStorage.getItem('profiles_cache_optimized');\n        const cacheTime = localStorage.getItem('profiles_cache_time');\n        const cacheAge = Date.now() - parseInt(cacheTime || '0');\n\n        // Use cache if it's less than 5 minutes old\n        if (cachedProfiles && cacheAge < 5 * 60 * 1000) {\n          console.log('Using cached profiles data (optimized)');\n          setProfiles(JSON.parse(cachedProfiles));\n          setError(null);\n          setLoading(false);\n          return;\n        }\n      }\n\n      // Choose endpoint based on pagination\n      const endpoint = usePagination ? `/api/profiles/paginated?page=${page}&limit=${limit}` : '/api/profiles'; // Optimized endpoint (excludes binary data)\n\n      const response = await fetch(`${getApiUrl()}${endpoint}`, {\n        headers: {\n          'Cache-Control': 'no-cache'\n        },\n        credentials: 'include'\n      });\n      if (response.ok) {\n        const data = await response.json();\n        const profilesData = usePagination ? data.profiles : data;\n        setProfiles(profilesData);\n        setError(null);\n\n        // Cache the optimized data for persistence (only for non-paginated)\n        if (!usePagination) {\n          localStorage.setItem('profiles_cache_optimized', JSON.stringify(profilesData));\n          localStorage.setItem('profiles_cache_time', Date.now().toString());\n          console.log(`Profiles cached successfully (${profilesData.length} profiles, optimized)`);\n        }\n\n        // Log data size reduction\n        const dataSize = JSON.stringify(profilesData).length;\n        console.log(`Fetched ${profilesData.length} profiles, data size: ${(dataSize / 1024 / 1024).toFixed(2)}MB`);\n        return usePagination ? data : profilesData;\n      } else {\n        console.error('Failed to fetch profiles:', response.status, response.statusText);\n        setError(`Failed to fetch profiles: ${response.status}`);\n      }\n    } catch (error) {\n      setError('Failed to fetch profiles');\n      console.error('Error fetching profiles:', error);\n\n      // Try to use cached data as fallback\n      const cachedProfiles = localStorage.getItem('profiles_cache_optimized');\n      if (cachedProfiles) {\n        console.log('Using cached profiles as fallback (optimized)');\n        setProfiles(JSON.parse(cachedProfiles));\n      } else {\n        setProfiles([]);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Add delete profile function\n  const deleteProfile = async profileId => {\n    try {\n      const response = await fetch(`${getApiUrl()}/api/profiles/${profileId}`, {\n        method: 'DELETE'\n      });\n      if (response.ok) {\n        // Remove from local state\n        setProfiles(prevProfiles => prevProfiles.filter(p => p._id !== profileId));\n\n        // Clear cache to force refresh\n        localStorage.removeItem('profiles_cache');\n        localStorage.removeItem('profiles_cache_time');\n        console.log('Profile deleted successfully');\n      } else {\n        throw new Error('Failed to delete profile');\n      }\n    } catch (error) {\n      console.error('Error deleting profile:', error);\n      throw error;\n    }\n  };\n\n  // Refresh profiles function\n  const refreshProfiles = async () => {\n    await fetchProfiles(true); // Force refresh\n  };\n  // Load profiles on mount\n  useEffect(() => {\n    fetchProfiles();\n  }, []);\n  const addProfile = async newProfile => {\n    setLoading(true);\n    try {\n      const response = await fetch(`${getApiUrl()}/api/profiles`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newProfile)\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to create profile: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Profile created successfully:', data);\n\n      // Add to local state\n      setProfiles(prev => [data, ...prev]);\n      setError(null);\n\n      // Update optimized cache with new data\n      const updatedProfiles = [data, ...profiles];\n      localStorage.setItem('profiles_cache_optimized', JSON.stringify(updatedProfiles));\n      localStorage.setItem('profiles_cache_time', Date.now().toString());\n      console.log('Profile added to optimized cache successfully');\n      return data;\n    } catch (err) {\n      setError('Failed to create profile');\n      console.error('Error creating profile:', err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const updateProfile = async (id, updatedProfile) => {\n    setLoading(true);\n    try {\n      const response = await fetch(`${getApiUrl()}/api/profiles/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedProfile),\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to update profile: ${response.status}`);\n      }\n      const data = await response.json();\n      setProfiles(prev => prev.map(profile => profile._id === id ? data : profile));\n\n      // Update optimized cache\n      const updatedProfiles = profiles.map(profile => profile._id === id ? data : profile);\n      localStorage.setItem('profiles_cache_optimized', JSON.stringify(updatedProfiles));\n      localStorage.setItem('profiles_cache_time', Date.now().toString());\n      setError(null);\n      return data;\n    } catch (err) {\n      setError('Failed to update profile');\n      console.error('Error updating profile:', err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const getProfileById = id => {\n    return profiles.find(profile => profile._id === id);\n  };\n\n  // Fetch individual profile with complete data (when needed)\n  const fetchProfileById = async id => {\n    try {\n      console.log('ProfileContext: Fetching individual profile for ID:', id);\n      const response = await fetch(`${getApiUrl()}/api/profiles/${id}`, {\n        credentials: 'include'\n      });\n      if (response.ok) {\n        const profile = await response.json();\n        console.log('ProfileContext: Individual profile fetched:', {\n          id: profile._id,\n          vtid: profile.vtid,\n          skillkoId: profile.skillkoId,\n          firstName: profile.firstName,\n          lastName: profile.lastName\n        });\n\n        // Update the profile in the local state\n        const updatedProfiles = profiles.map(p => p._id === id ? {\n          ...p,\n          ...profile\n        } : p);\n        setProfiles(updatedProfiles);\n\n        // Update optimized cache with the new profile data\n        localStorage.setItem('profiles_cache_optimized', JSON.stringify(updatedProfiles));\n        localStorage.setItem('profiles_cache_time', Date.now().toString());\n        console.log('ProfileContext: Profile updated in state and cache');\n        return profile;\n      } else {\n        throw new Error(`Failed to fetch profile: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error fetching individual profile:', error);\n      throw error;\n    }\n  };\n\n  // Fetch profile with complete data including binary data (rarely used)\n  const fetchCompleteProfileById = async id => {\n    try {\n      const response = await fetch(`${getApiUrl()}/api/profiles/${id}/complete`, {\n        credentials: 'include'\n      });\n      if (response.ok) {\n        const profile = await response.json();\n        return profile;\n      } else {\n        throw new Error(`Failed to fetch complete profile: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error fetching complete profile:', error);\n      throw error;\n    }\n  };\n  const uploadProfilePicture = async (id, file) => {\n    setLoading(true);\n    console.log('üì° ProfileContext: Starting upload request...', {\n      profileId: id,\n      fileName: file.name\n    });\n    try {\n      const formData = new FormData();\n      formData.append('profilePicture', file);\n      console.log('üåê ProfileContext: Sending request to server...');\n      const response = await fetch(`${getApiUrl()}/api/profiles/${id}/upload-picture`, {\n        method: 'POST',\n        body: formData,\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to upload profile picture: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('üì• ProfileContext: Server response received:', data);\n\n      // Update profile in state immediately\n      const updatedProfiles = profiles.map(profile => profile._id === id ? {\n        ...profile,\n        profilePicture: data.profilePicture\n      } : profile);\n      setProfiles(updatedProfiles);\n\n      // Update optimized cache immediately\n      localStorage.setItem('profiles_cache_optimized', JSON.stringify(updatedProfiles));\n      localStorage.setItem('profiles_cache_time', Date.now().toString());\n      console.log('üîÑ ProfileContext: Local state and cache updated');\n      setError(null);\n      console.log('‚úÖ ProfileContext: Upload completed successfully');\n      return data.profilePicture;\n    } catch (err) {\n      setError('Failed to upload profile picture');\n      console.error('‚ùå ProfileContext: Upload error:', err);\n      throw err;\n    } finally {\n      setLoading(false);\n      console.log('üèÅ ProfileContext: Upload process finished');\n    }\n  };\n\n  // User profile management - no default hardcoded data\n  const [userProfile, setUserProfile] = useState({});\n\n  // Initialize user profile with actual user data when user changes\n  useEffect(() => {\n    if (user) {\n      setUserProfile({\n        firstName: user.firstName || '',\n        lastName: user.lastName || '',\n        email: user.email || '',\n        company: user.company || '',\n        jobTitle: user.jobTitle || '',\n        mobile: user.mobile || '',\n        dateOfBirth: user.dateOfBirth || '',\n        bio: user.bio || '',\n        language: user.language || 'English',\n        address: user.address || {},\n        staffType: user.staffType || 'Staff',\n        role: user.role || '',\n        skillkoId: user.skillkoId || '',\n        department: user.department || '',\n        jobLevel: user.jobLevel || '',\n        profilePicture: user.profilePicture || ''\n      });\n    }\n  }, [user]);\n  const updateUserProfile = async profileData => {\n    setLoading(true);\n    try {\n      // TODO: Replace with actual API call when backend profile update endpoint is ready\n      // const response = await axios.put('/api/users/profile', profileData);\n\n      setUserProfile(prev => ({\n        ...prev,\n        firstName: profileData.firstName,\n        lastName: profileData.lastName,\n        name: `${profileData.firstName} ${profileData.lastName}`,\n        role: `Account Administrator, ${profileData.jobTitle}, ${profileData.company}`,\n        email: profileData.username,\n        company: profileData.company,\n        jobTitle: profileData.jobTitle,\n        mobile: profileData.mobile,\n        dob: profileData.dob,\n        bio: profileData.bio,\n        language: profileData.language,\n        otherInfo: profileData.otherInfo\n      }));\n      console.log('Profile updated:', profileData);\n      setError(null);\n      return {\n        success: true\n      };\n    } catch (err) {\n      setError('Failed to update profile');\n      return {\n        success: false,\n        error: err.message\n      };\n    }\n  };\n  const value = {\n    profiles,\n    loading,\n    error,\n    addProfile,\n    updateProfile,\n    deleteProfile,\n    refreshProfiles,\n    fetchProfiles,\n    getProfileById,\n    fetchProfileById,\n    fetchCompleteProfileById,\n    uploadProfilePicture,\n    userProfile,\n    updateUserProfile\n  };\n  return /*#__PURE__*/_jsxDEV(ProfileContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 403,\n    columnNumber: 5\n  }, this);\n};\n_s2(ProfileProvider, \"31Q1lQ9xtTqJNTv5nv5yZtPMaXE=\", false, function () {\n  return [useAuth];\n});\n_c = ProfileProvider;\nvar _c;\n$RefreshReg$(_c, \"ProfileProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","useAuth","jsxDEV","_jsxDEV","ProfileContext","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","getApiUrl","NODE_ENV","REACT_APP_API_URL","useProfiles","_s","context","Error","ProfileProvider","children","_s2","profiles","setProfiles","loading","setLoading","error","setError","user","fetchProfiles","forceRefresh","usePagination","page","limit","console","log","cachedProfiles","localStorage","getItem","cacheTime","cacheAge","Date","now","parseInt","JSON","parse","endpoint","response","fetch","headers","credentials","ok","data","json","profilesData","setItem","stringify","toString","length","dataSize","toFixed","status","statusText","deleteProfile","profileId","method","prevProfiles","filter","p","_id","removeItem","refreshProfiles","addProfile","newProfile","body","prev","updatedProfiles","err","updateProfile","id","updatedProfile","map","profile","getProfileById","find","fetchProfileById","vtid","skillkoId","firstName","lastName","fetchCompleteProfileById","uploadProfilePicture","file","fileName","name","formData","FormData","append","profilePicture","userProfile","setUserProfile","email","company","jobTitle","mobile","dateOfBirth","bio","language","address","staffType","role","department","jobLevel","updateUserProfile","profileData","username","dob","otherInfo","success","message","value","Provider","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/hrms/frontend/src/context/ProfileContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useAuth } from './AuthContext';\r\n\r\nconst ProfileContext = createContext();\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL;\r\n\r\nconst getApiUrl = () => {\r\n  // In development, use localhost URL\r\n  if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_API_URL) {\r\n    return process.env.REACT_APP_API_URL;\r\n  }\r\n  \r\n  // In production, use the environment variable or fallback\r\n  return process.env.REACT_APP_API_URL || 'http://localhost:5003';\r\n};\r\n\r\nexport const useProfiles = () => {\r\n  const context = useContext(ProfileContext);\r\n  if (!context) {\r\n    throw new Error('useProfiles must be used within a ProfileProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const ProfileProvider = ({ children }) => {\r\n  const [profiles, setProfiles] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const { user } = useAuth();\r\n\r\n  // Fetch profiles from API with optimization and persistence\r\n  const fetchProfiles = async (forceRefresh = false, usePagination = false, page = 1, limit = 20) => {\r\n    setLoading(true);\r\n    try {\r\n      console.log('Fetching profiles from API (optimized)');\r\n      \r\n      // Check cache first unless force refresh\r\n      if (!forceRefresh && !usePagination) {\r\n        const cachedProfiles = localStorage.getItem('profiles_cache_optimized');\r\n        const cacheTime = localStorage.getItem('profiles_cache_time');\r\n        const cacheAge = Date.now() - parseInt(cacheTime || '0');\r\n        \r\n        // Use cache if it's less than 5 minutes old\r\n        if (cachedProfiles && cacheAge < 5 * 60 * 1000) {\r\n          console.log('Using cached profiles data (optimized)');\r\n          setProfiles(JSON.parse(cachedProfiles));\r\n          setError(null);\r\n          setLoading(false);\r\n          return;\r\n        }\r\n      }\r\n      \r\n      // Choose endpoint based on pagination\r\n      const endpoint = usePagination \r\n        ? `/api/profiles/paginated?page=${page}&limit=${limit}`\r\n        : '/api/profiles'; // Optimized endpoint (excludes binary data)\r\n      \r\n      const response = await fetch(`${getApiUrl()}${endpoint}`, {\r\n        headers: {\r\n          'Cache-Control': 'no-cache',\r\n        },\r\n        credentials: 'include'\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        const profilesData = usePagination ? data.profiles : data;\r\n        \r\n        setProfiles(profilesData);\r\n        setError(null);\r\n        \r\n        // Cache the optimized data for persistence (only for non-paginated)\r\n        if (!usePagination) {\r\n          localStorage.setItem('profiles_cache_optimized', JSON.stringify(profilesData));\r\n          localStorage.setItem('profiles_cache_time', Date.now().toString());\r\n          console.log(`Profiles cached successfully (${profilesData.length} profiles, optimized)`);\r\n        }\r\n        \r\n        // Log data size reduction\r\n        const dataSize = JSON.stringify(profilesData).length;\r\n        console.log(`Fetched ${profilesData.length} profiles, data size: ${(dataSize / 1024 / 1024).toFixed(2)}MB`);\r\n        \r\n        return usePagination ? data : profilesData;\r\n      } else {\r\n        console.error('Failed to fetch profiles:', response.status, response.statusText);\r\n        setError(`Failed to fetch profiles: ${response.status}`);\r\n      }\r\n    } catch (error) {\r\n      setError('Failed to fetch profiles');\r\n      console.error('Error fetching profiles:', error);\r\n      \r\n      // Try to use cached data as fallback\r\n      const cachedProfiles = localStorage.getItem('profiles_cache_optimized');\r\n      if (cachedProfiles) {\r\n        console.log('Using cached profiles as fallback (optimized)');\r\n        setProfiles(JSON.parse(cachedProfiles));\r\n      } else {\r\n        setProfiles([]);\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Add delete profile function\r\n  const deleteProfile = async (profileId) => {\r\n    try {\r\n      const response = await fetch(`${getApiUrl()}/api/profiles/${profileId}`, {\r\n        method: 'DELETE',\r\n      });\r\n      \r\n      if (response.ok) {\r\n        // Remove from local state\r\n        setProfiles(prevProfiles => prevProfiles.filter(p => p._id !== profileId));\r\n        \r\n        // Clear cache to force refresh\r\n        localStorage.removeItem('profiles_cache');\r\n        localStorage.removeItem('profiles_cache_time');\r\n        \r\n        console.log('Profile deleted successfully');\r\n      } else {\r\n        throw new Error('Failed to delete profile');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error deleting profile:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Refresh profiles function\r\n  const refreshProfiles = async () => {\r\n    await fetchProfiles(true); // Force refresh\r\n  };\r\n  // Load profiles on mount\r\n  useEffect(() => {\r\n    fetchProfiles();\r\n  }, []);\r\n\r\n  const addProfile = async (newProfile) => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await fetch(`${getApiUrl()}/api/profiles`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(newProfile),\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Failed to create profile: ${response.status}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      console.log('Profile created successfully:', data);\r\n      \r\n      // Add to local state\r\n      setProfiles(prev => [data, ...prev]);\r\n      setError(null);\r\n      \r\n      // Update optimized cache with new data\r\n      const updatedProfiles = [data, ...profiles];\r\n      localStorage.setItem('profiles_cache_optimized', JSON.stringify(updatedProfiles));\r\n      localStorage.setItem('profiles_cache_time', Date.now().toString());\r\n      \r\n      console.log('Profile added to optimized cache successfully');\r\n      \r\n      return data;\r\n    } catch (err) {\r\n      setError('Failed to create profile');\r\n      console.error('Error creating profile:', err);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const updateProfile = async (id, updatedProfile) => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await fetch(`${getApiUrl()}/api/profiles/${id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(updatedProfile),\r\n        credentials: 'include'\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Failed to update profile: ${response.status}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      setProfiles(prev => \r\n        prev.map(profile => profile._id === id ? data : profile)\r\n      );\r\n      \r\n      // Update optimized cache\r\n      const updatedProfiles = profiles.map(profile => profile._id === id ? data : profile);\r\n      localStorage.setItem('profiles_cache_optimized', JSON.stringify(updatedProfiles));\r\n      localStorage.setItem('profiles_cache_time', Date.now().toString());\r\n      \r\n      setError(null);\r\n      return data;\r\n    } catch (err) {\r\n      setError('Failed to update profile');\r\n      console.error('Error updating profile:', err);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n\r\n  const getProfileById = (id) => {\r\n    return profiles.find(profile => profile._id === id);\r\n  };\r\n\r\n  // Fetch individual profile with complete data (when needed)\r\n  const fetchProfileById = async (id) => {\r\n    try {\r\n      console.log('ProfileContext: Fetching individual profile for ID:', id);\r\n      const response = await fetch(`${getApiUrl()}/api/profiles/${id}`, {\r\n        credentials: 'include'\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const profile = await response.json();\r\n        console.log('ProfileContext: Individual profile fetched:', {\r\n          id: profile._id,\r\n          vtid: profile.vtid,\r\n          skillkoId: profile.skillkoId,\r\n          firstName: profile.firstName,\r\n          lastName: profile.lastName\r\n        });\r\n        \r\n        // Update the profile in the local state\r\n        const updatedProfiles = profiles.map(p => p._id === id ? { ...p, ...profile } : p);\r\n        setProfiles(updatedProfiles);\r\n        \r\n        // Update optimized cache with the new profile data\r\n        localStorage.setItem('profiles_cache_optimized', JSON.stringify(updatedProfiles));\r\n        localStorage.setItem('profiles_cache_time', Date.now().toString());\r\n        console.log('ProfileContext: Profile updated in state and cache');\r\n        \r\n        return profile;\r\n      } else {\r\n        throw new Error(`Failed to fetch profile: ${response.status}`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching individual profile:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Fetch profile with complete data including binary data (rarely used)\r\n  const fetchCompleteProfileById = async (id) => {\r\n    try {\r\n      const response = await fetch(`${getApiUrl()}/api/profiles/${id}/complete`, {\r\n        credentials: 'include'\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const profile = await response.json();\r\n        return profile;\r\n      } else {\r\n        throw new Error(`Failed to fetch complete profile: ${response.status}`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching complete profile:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const uploadProfilePicture = async (id, file) => {\r\n    setLoading(true);\r\n    console.log('üì° ProfileContext: Starting upload request...', { profileId: id, fileName: file.name });\r\n    \r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('profilePicture', file);\r\n      \r\n      console.log('üåê ProfileContext: Sending request to server...');\r\n      const response = await fetch(`${getApiUrl()}/api/profiles/${id}/upload-picture`, {\r\n        method: 'POST',\r\n        body: formData,\r\n        credentials: 'include'\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Failed to upload profile picture: ${response.status}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      console.log('üì• ProfileContext: Server response received:', data);\r\n      \r\n      // Update profile in state immediately\r\n      const updatedProfiles = profiles.map(profile => \r\n        profile._id === id \r\n          ? { ...profile, profilePicture: data.profilePicture }\r\n          : profile\r\n      );\r\n      setProfiles(updatedProfiles);\r\n      \r\n      // Update optimized cache immediately\r\n      localStorage.setItem('profiles_cache_optimized', JSON.stringify(updatedProfiles));\r\n      localStorage.setItem('profiles_cache_time', Date.now().toString());\r\n      \r\n      console.log('üîÑ ProfileContext: Local state and cache updated');\r\n      \r\n      setError(null);\r\n      console.log('‚úÖ ProfileContext: Upload completed successfully');\r\n      return data.profilePicture;\r\n    } catch (err) {\r\n      setError('Failed to upload profile picture');\r\n      console.error('‚ùå ProfileContext: Upload error:', err);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n      console.log('üèÅ ProfileContext: Upload process finished');\r\n    }\r\n  };\r\n\r\n  // User profile management - no default hardcoded data\r\n  const [userProfile, setUserProfile] = useState({});\r\n\r\n  // Initialize user profile with actual user data when user changes\r\n  useEffect(() => {\r\n    if (user) {\r\n      setUserProfile({\r\n        firstName: user.firstName || '',\r\n        lastName: user.lastName || '',\r\n        email: user.email || '',\r\n        company: user.company || '',\r\n        jobTitle: user.jobTitle || '',\r\n        mobile: user.mobile || '',\r\n        dateOfBirth: user.dateOfBirth || '',\r\n        bio: user.bio || '',\r\n        language: user.language || 'English',\r\n        address: user.address || {},\r\n        staffType: user.staffType || 'Staff',\r\n        role: user.role || '',\r\n        skillkoId: user.skillkoId || '',\r\n        department: user.department || '',\r\n        jobLevel: user.jobLevel || '',\r\n        profilePicture: user.profilePicture || ''\r\n      });\r\n    }\r\n  }, [user]);\r\n\r\n  const updateUserProfile = async (profileData) => {\r\n    setLoading(true);\r\n    try {\r\n      // TODO: Replace with actual API call when backend profile update endpoint is ready\r\n      // const response = await axios.put('/api/users/profile', profileData);\r\n      \r\n      setUserProfile(prev => ({\r\n        ...prev,\r\n        firstName: profileData.firstName,\r\n        lastName: profileData.lastName,\r\n        name: `${profileData.firstName} ${profileData.lastName}`,\r\n        role: `Account Administrator, ${profileData.jobTitle}, ${profileData.company}`,\r\n        email: profileData.username,\r\n        company: profileData.company,\r\n        jobTitle: profileData.jobTitle,\r\n        mobile: profileData.mobile,\r\n        dob: profileData.dob,\r\n        bio: profileData.bio,\r\n        language: profileData.language,\r\n        otherInfo: profileData.otherInfo\r\n      }));\r\n      \r\n      console.log('Profile updated:', profileData);\r\n      setError(null);\r\n      return { success: true };\r\n    } catch (err) {\r\n      setError('Failed to update profile');\r\n      return { success: false, error: err.message };\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    profiles,\r\n    loading,\r\n    error,\r\n    addProfile,\r\n    updateProfile,\r\n    deleteProfile,\r\n    refreshProfiles,\r\n    fetchProfiles,\r\n    getProfileById,\r\n    fetchProfileById,\r\n    fetchCompleteProfileById,\r\n    uploadProfilePicture,\r\n    userProfile,\r\n    updateUserProfile\r\n  };\r\n\r\n  return (\r\n    <ProfileContext.Provider value={value}>\r\n      {children}\r\n    </ProfileContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}