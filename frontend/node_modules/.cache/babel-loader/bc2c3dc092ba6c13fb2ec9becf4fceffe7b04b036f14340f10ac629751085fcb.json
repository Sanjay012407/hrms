{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\hrms\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/context/AuthContext.js\nimport React, { createContext, useContext, useState, useEffect, useCallback } from \"react\";\nimport axios from \"axios\";\nimport { getErrorMessage } from '../utils/errorHandler';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nconst getApiUrl = () => {\n  var _process$env$REACT_AP;\n  // In development, use localhost URL\n  if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_API_URL) {\n    return process.env.REACT_APP_API_URL;\n  }\n  // In production or when API_BASE_URL is relative, use relative path\n  if ((_process$env$REACT_AP = process.env.REACT_APP_API_BASE_URL) !== null && _process$env$REACT_AP !== void 0 && _process$env$REACT_AP.startsWith('/')) {\n    return '';\n  }\n  // Fallback to localhost for development\n  return process.env.REACT_APP_API_URL || 'http://localhost:5003';\n};\nconst API_BASE_URL = `${getApiUrl()}`;\n\n// Configure axios to include credentials (cookies) with requests\naxios.defaults.withCredentials = true;\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  // Session storage utilities - only for authentication state\n  const sessionStorage = {\n    // Store user session data\n    setUserSession: (userData, token = null) => {\n      try {\n        localStorage.setItem('user_session', JSON.stringify({\n          user: userData,\n          timestamp: Date.now(),\n          expiresAt: Date.now() + 24 * 60 * 60 * 1000 // 24 hours\n        }));\n        if (token) {\n          localStorage.setItem('auth_token', token);\n        }\n      } catch (error) {\n        console.error('Error storing session:', error);\n      }\n    },\n    // Get user session data\n    getUserSession: () => {\n      try {\n        const sessionData = localStorage.getItem('user_session');\n        if (sessionData) {\n          const parsed = JSON.parse(sessionData);\n          // Check if session is expired\n          if (parsed.expiresAt && Date.now() > parsed.expiresAt) {\n            sessionStorage.clearSession();\n            return null;\n          }\n          return parsed;\n        }\n      } catch (error) {\n        console.error('Error reading session:', error);\n        sessionStorage.clearSession();\n      }\n      return null;\n    },\n    // Clear all session data\n    clearSession: () => {\n      try {\n        localStorage.removeItem('user_session');\n        localStorage.removeItem('auth_token');\n        localStorage.removeItem('session_cookie');\n      } catch (error) {\n        console.error('Error clearing session:', error);\n      }\n    },\n    // Store session cookie for backend communication\n    setSessionCookie: cookieValue => {\n      try {\n        localStorage.setItem('session_cookie', cookieValue);\n      } catch (error) {\n        console.error('Error storing session cookie:', error);\n      }\n    },\n    // Get auth token\n    getAuthToken: () => {\n      try {\n        return localStorage.getItem('auth_token');\n      } catch (error) {\n        console.error('Error reading auth token:', error);\n        return null;\n      }\n    }\n  };\n\n  // Initialize state from session storage\n  const getInitialState = () => {\n    const sessionData = sessionStorage.getUserSession();\n    if (sessionData && sessionData.user) {\n      return {\n        user: sessionData.user,\n        isAuthenticated: true\n      };\n    }\n    return {\n      user: null,\n      isAuthenticated: false\n    };\n  };\n  const initialState = getInitialState();\n  const [user, setUser] = useState(initialState.user);\n  const [isAuthenticated, setIsAuthenticated] = useState(initialState.isAuthenticated);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Store session cookie for session maintenance\n  const storeSessionCookie = () => {\n    const cookies = document.cookie.split(';');\n    const sessionCookie = cookies.find(cookie => cookie.trim().startsWith('talentshield.sid='));\n    if (sessionCookie) {\n      console.log('Session cookie captured:', sessionCookie);\n      sessionStorage.setSessionCookie(sessionCookie);\n    } else {\n      sessionStorage.clearSession();\n    }\n  };\n  const checkExistingSession = useCallback(async () => {\n    try {\n      const sessionData = sessionStorage.getUserSession();\n      if (sessionData && sessionData.user) {\n        try {\n          await axios.get(`${API_BASE_URL}/api/auth/validate-session`, {\n            withCredentials: true,\n            timeout: 5000\n          });\n          // Session is valid, no action needed\n        } catch (error) {\n          var _error$response, _error$response2;\n          // Session invalid, clear it\n          if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 403 || ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 401) {\n            handleInvalidSession();\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error checking session:', error);\n      // Don't clear session on network errors, only on auth errors\n    }\n  }, []);\n\n  // Check for existing session on app start\n  useEffect(() => {\n    let isMounted = true;\n\n    // Only run background validation if user is not already set\n    if (!user && isMounted) {\n      checkExistingSession();\n    }\n\n    // Listen for localStorage changes to sync across tabs (session management only)\n    const handleStorageChange = e => {\n      if (!isMounted) return;\n      if (e.key === 'user_session') {\n        if (e.newValue) {\n          try {\n            const sessionData = JSON.parse(e.newValue);\n            if (sessionData.user && isMounted) {\n              setUser(sessionData.user);\n              setIsAuthenticated(true);\n            }\n          } catch (error) {\n            console.error('Error parsing session storage change:', error);\n          }\n        } else {\n          // Session was removed\n          if (isMounted) {\n            setUser(null);\n            setIsAuthenticated(false);\n          }\n        }\n      }\n    };\n    window.addEventListener('storage', handleStorageChange);\n    return () => {\n      isMounted = false;\n      window.removeEventListener('storage', handleStorageChange);\n    };\n  }, [user, checkExistingSession]);\n  const login = async (email, password, rememberMe = false) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await axios.post(`${API_BASE_URL}/api/auth/login`, {\n        email,\n        password,\n        rememberMe\n      }, {\n        timeout: 10000,\n        withCredentials: true\n      });\n      const {\n        token,\n        user: userData\n      } = response.data;\n      if (!userData) {\n        throw new Error('Invalid response from server');\n      }\n\n      // Store session data using our session storage utility\n      sessionStorage.setUserSession(userData, token);\n\n      // Update state - session is automatically handled by cookies\n      setUser(userData);\n      setIsAuthenticated(true);\n      return {\n        success: true,\n        user: userData\n      };\n    } catch (err) {\n      const errorMessage = getErrorMessage(err);\n      setError(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const signup = async userData => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await axios.post(`${API_BASE_URL}/api/auth/signup`, userData, {\n        timeout: 10000,\n        withCredentials: true\n      });\n      return {\n        success: true,\n        message: \"Account created successfully\"\n      };\n    } catch (err) {\n      const errorMessage = getErrorMessage(err);\n      setError(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = async () => {\n    setLoading(true);\n    try {\n      // Call backend logout endpoint to destroy session\n      await axios.post(`${API_BASE_URL}/api/auth/logout`);\n    } catch (err) {\n      console.error(\"Logout error:\", err);\n    } finally {\n      // Clear session data using our session storage utility\n      sessionStorage.clearSession();\n      setUser(null);\n      setIsAuthenticated(false);\n      setError(null);\n      setLoading(false);\n    }\n  };\n  const handleInvalidSession = () => {\n    console.log(\"Invalid session. Clearing user data.\");\n    sessionStorage.clearSession();\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n  const updateUser = updatedUserData => {\n    const newUserData = {\n      ...user,\n      ...updatedUserData\n    };\n    setUser(newUserData);\n    sessionStorage.setUserSession(newUserData);\n  };\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    error,\n    login,\n    signup,\n    logout,\n    updateUser,\n    storeSessionCookie\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 303,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"w+YI63dzjLKaIan6n/7BiZfvEq0=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","axios","getErrorMessage","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","getApiUrl","_process$env$REACT_AP","process","env","NODE_ENV","REACT_APP_API_URL","REACT_APP_API_BASE_URL","startsWith","API_BASE_URL","defaults","withCredentials","AuthProvider","children","_s2","sessionStorage","setUserSession","userData","token","localStorage","setItem","JSON","stringify","user","timestamp","Date","now","expiresAt","error","console","getUserSession","sessionData","getItem","parsed","parse","clearSession","removeItem","setSessionCookie","cookieValue","getAuthToken","getInitialState","isAuthenticated","initialState","setUser","setIsAuthenticated","loading","setLoading","setError","storeSessionCookie","cookies","document","cookie","split","sessionCookie","find","trim","log","checkExistingSession","get","timeout","_error$response","_error$response2","response","status","handleInvalidSession","isMounted","handleStorageChange","e","key","newValue","window","addEventListener","removeEventListener","login","email","password","rememberMe","post","data","success","err","errorMessage","signup","message","logout","updateUser","updatedUserData","newUserData","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/hrms/frontend/src/context/AuthContext.js"],"sourcesContent":["// src/context/AuthContext.js\r\nimport React, { createContext, useContext, useState, useEffect, useCallback } from \"react\";\r\nimport axios from \"axios\";\r\nimport { getErrorMessage } from '../utils/errorHandler';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error(\"useAuth must be used within an AuthProvider\");\r\n  }\r\n  return context;\r\n};\r\n\r\nconst getApiUrl = () => {\r\n  // In development, use localhost URL\r\n  if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_API_URL) {\r\n    return process.env.REACT_APP_API_URL;\r\n  }\r\n  // In production or when API_BASE_URL is relative, use relative path\r\n  if (process.env.REACT_APP_API_BASE_URL?.startsWith('/')) {\r\n    return '';\r\n  }\r\n  // Fallback to localhost for development\r\n  return process.env.REACT_APP_API_URL || 'http://localhost:5003';\r\n};\r\n\r\nconst API_BASE_URL = `${getApiUrl()}`;\r\n\r\n// Configure axios to include credentials (cookies) with requests\r\naxios.defaults.withCredentials = true;\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  // Session storage utilities - only for authentication state\r\n  const sessionStorage = {\r\n    // Store user session data\r\n    setUserSession: (userData, token = null) => {\r\n      try {\r\n        localStorage.setItem('user_session', JSON.stringify({\r\n          user: userData,\r\n          timestamp: Date.now(),\r\n          expiresAt: Date.now() + (24 * 60 * 60 * 1000) // 24 hours\r\n        }));\r\n        if (token) {\r\n          localStorage.setItem('auth_token', token);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error storing session:', error);\r\n      }\r\n    },\r\n\r\n    // Get user session data\r\n    getUserSession: () => {\r\n      try {\r\n        const sessionData = localStorage.getItem('user_session');\r\n        if (sessionData) {\r\n          const parsed = JSON.parse(sessionData);\r\n          // Check if session is expired\r\n          if (parsed.expiresAt && Date.now() > parsed.expiresAt) {\r\n            sessionStorage.clearSession();\r\n            return null;\r\n          }\r\n          return parsed;\r\n        }\r\n      } catch (error) {\r\n        console.error('Error reading session:', error);\r\n        sessionStorage.clearSession();\r\n      }\r\n      return null;\r\n    },\r\n\r\n    // Clear all session data\r\n    clearSession: () => {\r\n      try {\r\n        localStorage.removeItem('user_session');\r\n        localStorage.removeItem('auth_token');\r\n        localStorage.removeItem('session_cookie');\r\n      } catch (error) {\r\n        console.error('Error clearing session:', error);\r\n      }\r\n    },\r\n\r\n    // Store session cookie for backend communication\r\n    setSessionCookie: (cookieValue) => {\r\n      try {\r\n        localStorage.setItem('session_cookie', cookieValue);\r\n      } catch (error) {\r\n        console.error('Error storing session cookie:', error);\r\n      }\r\n    },\r\n\r\n    // Get auth token\r\n    getAuthToken: () => {\r\n      try {\r\n        return localStorage.getItem('auth_token');\r\n      } catch (error) {\r\n        console.error('Error reading auth token:', error);\r\n        return null;\r\n      }\r\n    }\r\n  };\r\n\r\n  // Initialize state from session storage\r\n  const getInitialState = () => {\r\n    const sessionData = sessionStorage.getUserSession();\r\n    if (sessionData && sessionData.user) {\r\n      return {\r\n        user: sessionData.user,\r\n        isAuthenticated: true\r\n      };\r\n    }\r\n    return {\r\n      user: null,\r\n      isAuthenticated: false\r\n    };\r\n  };\r\n\r\n  const initialState = getInitialState();\r\n  const [user, setUser] = useState(initialState.user);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(initialState.isAuthenticated);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Store session cookie for session maintenance\r\n  const storeSessionCookie = () => {\r\n    const cookies = document.cookie.split(';');\r\n    const sessionCookie = cookies.find(cookie => cookie.trim().startsWith('talentshield.sid='));\r\n\r\n    if (sessionCookie) {\r\n      console.log('Session cookie captured:', sessionCookie);\r\n      sessionStorage.setSessionCookie(sessionCookie);\r\n    } else {\r\n      sessionStorage.clearSession();\r\n    }\r\n  };\r\n\r\n  const checkExistingSession = useCallback(async () => {\r\n    try {\r\n      const sessionData = sessionStorage.getUserSession();\r\n      if (sessionData && sessionData.user) {\r\n        try {\r\n          await axios.get(`${API_BASE_URL}/api/auth/validate-session`, {\r\n            withCredentials: true,\r\n            timeout: 5000\r\n          });\r\n          // Session is valid, no action needed\r\n        } catch (error) {\r\n          // Session invalid, clear it\r\n          if (error.response?.status === 403 || error.response?.status === 401) {\r\n            handleInvalidSession();\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error checking session:', error);\r\n      // Don't clear session on network errors, only on auth errors\r\n    }\r\n  }, []);\r\n\r\n  // Check for existing session on app start\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    \r\n    // Only run background validation if user is not already set\r\n    if (!user && isMounted) {\r\n      checkExistingSession();\r\n    }\r\n\r\n    // Listen for localStorage changes to sync across tabs (session management only)\r\n    const handleStorageChange = (e) => {\r\n      if (!isMounted) return;\r\n      \r\n      if (e.key === 'user_session') {\r\n        if (e.newValue) {\r\n          try {\r\n            const sessionData = JSON.parse(e.newValue);\r\n            if (sessionData.user && isMounted) {\r\n              setUser(sessionData.user);\r\n              setIsAuthenticated(true);\r\n            }\r\n          } catch (error) {\r\n            console.error('Error parsing session storage change:', error);\r\n          }\r\n        } else {\r\n          // Session was removed\r\n          if (isMounted) {\r\n            setUser(null);\r\n            setIsAuthenticated(false);\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    window.addEventListener('storage', handleStorageChange);\r\n    return () => {\r\n      isMounted = false;\r\n      window.removeEventListener('storage', handleStorageChange);\r\n    };\r\n  }, [user, checkExistingSession]);\r\n\r\n\r\n  const login = async (email, password, rememberMe = false) => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}/api/auth/login`, {\r\n        email,\r\n        password,\r\n        rememberMe\r\n      }, {\r\n        timeout: 10000,\r\n        withCredentials: true\r\n      });\r\n\r\n      const { token, user: userData } = response.data;\r\n\r\n      if (!userData) {\r\n        throw new Error('Invalid response from server');\r\n      }\r\n\r\n      // Store session data using our session storage utility\r\n      sessionStorage.setUserSession(userData, token);\r\n\r\n      // Update state - session is automatically handled by cookies\r\n      setUser(userData);\r\n      setIsAuthenticated(true);\r\n\r\n      return { success: true, user: userData };\r\n    } catch (err) {\r\n      const errorMessage = getErrorMessage(err);\r\n      setError(errorMessage);\r\n      return { success: false, error: errorMessage };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const signup = async (userData) => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}/api/auth/signup`, userData, {\r\n        timeout: 10000,\r\n        withCredentials: true\r\n      });\r\n\r\n      return { success: true, message: \"Account created successfully\" };\r\n    } catch (err) {\r\n      const errorMessage = getErrorMessage(err);\r\n      setError(errorMessage);\r\n      return { success: false, error: errorMessage };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    setLoading(true);\r\n    try {\r\n      // Call backend logout endpoint to destroy session\r\n      await axios.post(`${API_BASE_URL}/api/auth/logout`);\r\n    } catch (err) {\r\n      console.error(\"Logout error:\", err);\r\n    } finally {\r\n      // Clear session data using our session storage utility\r\n      sessionStorage.clearSession();\r\n      setUser(null);\r\n      setIsAuthenticated(false);\r\n      setError(null);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleInvalidSession = () => {\r\n    console.log(\"Invalid session. Clearing user data.\");\r\n    sessionStorage.clearSession();\r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n  };\r\n\r\n  const updateUser = (updatedUserData) => {\r\n    const newUserData = { ...user, ...updatedUserData };\r\n    setUser(newUserData);\r\n    sessionStorage.setUserSession(newUserData);\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    isAuthenticated,\r\n    loading,\r\n    error,\r\n    login,\r\n    signup,\r\n    logout,\r\n    updateUser,\r\n    storeSessionCookie\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}