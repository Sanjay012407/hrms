{"ast":null,"code":"// src/utils/errorHandler.js\nexport const handleError=function(error){var _error$response,_error$response$data;let context=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'Unknown';// Log error for debugging\nconsole.error(\"Error in \".concat(context,\":\"),error);// In production, you might want to send errors to a logging service\nif(process.env.NODE_ENV==='production'){// Example: Send to error tracking service\n// errorTrackingService.captureException(error, { context });\n}// Return user-friendly error message\nif(error!==null&&error!==void 0&&(_error$response=error.response)!==null&&_error$response!==void 0&&(_error$response$data=_error$response.data)!==null&&_error$response$data!==void 0&&_error$response$data.message){return error.response.data.message;}if(error!==null&&error!==void 0&&error.message){return error.message;}return'An unexpected error occurred. Please try again.';};export const isNetworkError=error=>{return!error.response&&error.request;};export const isServerError=error=>{var _error$response2;return(error===null||error===void 0?void 0:(_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.status)>=500;};export const isClientError=error=>{var _error$response3,_error$response4;return(error===null||error===void 0?void 0:(_error$response3=error.response)===null||_error$response3===void 0?void 0:_error$response3.status)>=400&&(error===null||error===void 0?void 0:(_error$response4=error.response)===null||_error$response4===void 0?void 0:_error$response4.status)<500;};export const getErrorMessage=error=>{if(isNetworkError(error)){return'Network error. Please check your internet connection.';}if(isServerError(error)){return'Server error. Please try again later.';}if(isClientError(error)){var _error$response5,_error$response5$data;return((_error$response5=error.response)===null||_error$response5===void 0?void 0:(_error$response5$data=_error$response5.data)===null||_error$response5$data===void 0?void 0:_error$response5$data.message)||'Invalid request.';}return handleError(error);};","map":{"version":3,"names":["handleError","error","_error$response","_error$response$data","context","arguments","length","undefined","console","concat","process","env","NODE_ENV","response","data","message","isNetworkError","request","isServerError","_error$response2","status","isClientError","_error$response3","_error$response4","getErrorMessage","_error$response5","_error$response5$data"],"sources":["C:/Users/DELL/Desktop/hrms/frontend/src/utils/errorHandler.js"],"sourcesContent":["// src/utils/errorHandler.js\r\nexport const handleError = (error, context = 'Unknown') => {\r\n  // Log error for debugging\r\n  console.error(`Error in ${context}:`, error);\r\n  \r\n  // In production, you might want to send errors to a logging service\r\n  if (process.env.NODE_ENV === 'production') {\r\n    // Example: Send to error tracking service\r\n    // errorTrackingService.captureException(error, { context });\r\n  }\r\n  \r\n  // Return user-friendly error message\r\n  if (error?.response?.data?.message) {\r\n    return error.response.data.message;\r\n  }\r\n  \r\n  if (error?.message) {\r\n    return error.message;\r\n  }\r\n  \r\n  return 'An unexpected error occurred. Please try again.';\r\n};\r\n\r\nexport const isNetworkError = (error) => {\r\n  return !error.response && error.request;\r\n};\r\n\r\nexport const isServerError = (error) => {\r\n  return error?.response?.status >= 500;\r\n};\r\n\r\nexport const isClientError = (error) => {\r\n  return error?.response?.status >= 400 && error?.response?.status < 500;\r\n};\r\n\r\nexport const getErrorMessage = (error) => {\r\n  if (isNetworkError(error)) {\r\n    return 'Network error. Please check your internet connection.';\r\n  }\r\n  \r\n  if (isServerError(error)) {\r\n    return 'Server error. Please try again later.';\r\n  }\r\n  \r\n  if (isClientError(error)) {\r\n    return error.response?.data?.message || 'Invalid request.';\r\n  }\r\n  \r\n  return handleError(error);\r\n};\r\n"],"mappings":"AAAA;AACA,MAAO,MAAM,CAAAA,WAAW,CAAG,QAAAA,CAACC,KAAK,CAA0B,KAAAC,eAAA,CAAAC,oBAAA,IAAxB,CAAAC,OAAO,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,SAAS,CACpD;AACAG,OAAO,CAACP,KAAK,aAAAQ,MAAA,CAAaL,OAAO,MAAKH,KAAK,CAAC,CAE5C;AACA,GAAIS,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAK,YAAY,CAAE,CACzC;AACA;AAAA,CAGF;AACA,GAAIX,KAAK,SAALA,KAAK,YAAAC,eAAA,CAALD,KAAK,CAAEY,QAAQ,UAAAX,eAAA,YAAAC,oBAAA,CAAfD,eAAA,CAAiBY,IAAI,UAAAX,oBAAA,WAArBA,oBAAA,CAAuBY,OAAO,CAAE,CAClC,MAAO,CAAAd,KAAK,CAACY,QAAQ,CAACC,IAAI,CAACC,OAAO,CACpC,CAEA,GAAId,KAAK,SAALA,KAAK,WAALA,KAAK,CAAEc,OAAO,CAAE,CAClB,MAAO,CAAAd,KAAK,CAACc,OAAO,CACtB,CAEA,MAAO,iDAAiD,CAC1D,CAAC,CAED,MAAO,MAAM,CAAAC,cAAc,CAAIf,KAAK,EAAK,CACvC,MAAO,CAACA,KAAK,CAACY,QAAQ,EAAIZ,KAAK,CAACgB,OAAO,CACzC,CAAC,CAED,MAAO,MAAM,CAAAC,aAAa,CAAIjB,KAAK,EAAK,KAAAkB,gBAAA,CACtC,MAAO,CAAAlB,KAAK,SAALA,KAAK,kBAAAkB,gBAAA,CAALlB,KAAK,CAAEY,QAAQ,UAAAM,gBAAA,iBAAfA,gBAAA,CAAiBC,MAAM,GAAI,GAAG,CACvC,CAAC,CAED,MAAO,MAAM,CAAAC,aAAa,CAAIpB,KAAK,EAAK,KAAAqB,gBAAA,CAAAC,gBAAA,CACtC,MAAO,CAAAtB,KAAK,SAALA,KAAK,kBAAAqB,gBAAA,CAALrB,KAAK,CAAEY,QAAQ,UAAAS,gBAAA,iBAAfA,gBAAA,CAAiBF,MAAM,GAAI,GAAG,EAAI,CAAAnB,KAAK,SAALA,KAAK,kBAAAsB,gBAAA,CAALtB,KAAK,CAAEY,QAAQ,UAAAU,gBAAA,iBAAfA,gBAAA,CAAiBH,MAAM,EAAG,GAAG,CACxE,CAAC,CAED,MAAO,MAAM,CAAAI,eAAe,CAAIvB,KAAK,EAAK,CACxC,GAAIe,cAAc,CAACf,KAAK,CAAC,CAAE,CACzB,MAAO,uDAAuD,CAChE,CAEA,GAAIiB,aAAa,CAACjB,KAAK,CAAC,CAAE,CACxB,MAAO,uCAAuC,CAChD,CAEA,GAAIoB,aAAa,CAACpB,KAAK,CAAC,CAAE,KAAAwB,gBAAA,CAAAC,qBAAA,CACxB,MAAO,EAAAD,gBAAA,CAAAxB,KAAK,CAACY,QAAQ,UAAAY,gBAAA,kBAAAC,qBAAA,CAAdD,gBAAA,CAAgBX,IAAI,UAAAY,qBAAA,iBAApBA,qBAAA,CAAsBX,OAAO,GAAI,kBAAkB,CAC5D,CAEA,MAAO,CAAAf,WAAW,CAACC,KAAK,CAAC,CAC3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}